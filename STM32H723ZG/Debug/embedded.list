
embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f34  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080092a4  080092a4  0000a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080092ac  080092ac  0000a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080092b0  080092b0  0000a2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  080092b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000018  080092cc  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000078  0800932c  0000b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  240000d8  0800938c  0000b0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004c1c  0800938c  0000bc1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b6f  00000000  00000000  0000b106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f3  00000000  00000000  0002ec75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b2  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000373fc  00000000  00000000  000361da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d8f  00000000  00000000  0006d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015c35c  00000000  00000000  00091365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fec  00000000  00000000  001ed704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001f46f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d8 	.word	0x240000d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080091ec 	.word	0x080091ec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000dc 	.word	0x240000dc
 800030c:	080091ec 	.word	0x080091ec

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main_app>:


char * pvParameters = "print message";

void main_app()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
	xTaskCreate(printMsgTask, "printTask", 1024, pvParameters, 1, NULL);
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <main_app+0x28>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	9201      	str	r2, [sp, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000626:	4905      	ldr	r1, [pc, #20]	@ (800063c <main_app+0x2c>)
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <main_app+0x30>)
 800062a:	f006 fedd 	bl	80073e8 <xTaskCreate>

	vTaskStartScheduler();
 800062e:	f007 f8d7 	bl	80077e0 <vTaskStartScheduler>

	while(1)
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main_app+0x22>
 8000636:	bf00      	nop
 8000638:	24000000 	.word	0x24000000
 800063c:	08009214 	.word	0x08009214
 8000640:	08000681 	.word	0x08000681

08000644 <printMsg>:

#include "printMsg.h"

void printMsg(const uint8_t *message)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	uint16_t length = strlen((void*)message);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fe5f 	bl	8000310 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, message, length, 1);
 8000656:	89fa      	ldrh	r2, [r7, #14]
 8000658:	2301      	movs	r3, #1
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4806      	ldr	r0, [pc, #24]	@ (8000678 <printMsg+0x34>)
 800065e:	f004 fd27 	bl	80050b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(void*) "\r\n", 1, 1);
 8000662:	2301      	movs	r3, #1
 8000664:	2201      	movs	r2, #1
 8000666:	4905      	ldr	r1, [pc, #20]	@ (800067c <printMsg+0x38>)
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <printMsg+0x34>)
 800066a:	f004 fd21 	bl	80050b0 <HAL_UART_Transmit>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	24000234 	.word	0x24000234
 800067c:	08009220 	.word	0x08009220

08000680 <printMsgTask>:

#include "printMsgTask.h"


void printMsgTask(const uint8_t *message)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;

	const TickType_t time = pdMS_TO_TICKS(1000);
 8000688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068c:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 800068e:	f007 f9bb 	bl	8007a08 <xTaskGetTickCount>
 8000692:	4603      	mov	r3, r0
 8000694:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		printMsg(message);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ffd4 	bl	8000644 <printMsg>
		vTaskDelayUntil(&xLastWakeTime, time);
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 ffe6 	bl	8007674 <vTaskDelayUntil>
		printMsg(message);
 80006a8:	bf00      	nop
 80006aa:	e7f4      	b.n	8000696 <printMsgTask+0x16>

080006ac <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_ETH_Init+0x80>)
 80006b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <MX_ETH_Init+0x84>)
 80006b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_ETH_Init+0x88>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_ETH_Init+0x88>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_ETH_Init+0x88>)
 80006c4:	22e1      	movs	r2, #225	@ 0xe1
 80006c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_ETH_Init+0x88>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_ETH_Init+0x88>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_ETH_Init+0x88>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_ETH_Init+0x80>)
 80006dc:	4a15      	ldr	r2, [pc, #84]	@ (8000734 <MX_ETH_Init+0x88>)
 80006de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_ETH_Init+0x80>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_ETH_Init+0x80>)
 80006e8:	4a13      	ldr	r2, [pc, #76]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_ETH_Init+0x80>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	@ (800073c <MX_ETH_Init+0x90>)
 80006f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_ETH_Init+0x80>)
 80006f4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006fa:	480c      	ldr	r0, [pc, #48]	@ (800072c <MX_ETH_Init+0x80>)
 80006fc:	f000 fe06 	bl	800130c <HAL_ETH_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000706:	f000 fa9b 	bl	8000c40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800070a:	2238      	movs	r2, #56	@ 0x38
 800070c:	2100      	movs	r1, #0
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <MX_ETH_Init+0x94>)
 8000710:	f008 fd32 	bl	8009178 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_ETH_Init+0x94>)
 8000716:	2221      	movs	r2, #33	@ 0x21
 8000718:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_ETH_Init+0x94>)
 800071c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000720:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_ETH_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400012c 	.word	0x2400012c
 8000730:	40028000 	.word	0x40028000
 8000734:	240001dc 	.word	0x240001dc
 8000738:	24000078 	.word	0x24000078
 800073c:	24000018 	.word	0x24000018
 8000740:	240000f4 	.word	0x240000f4

08000744 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	@ 0x38
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a59      	ldr	r2, [pc, #356]	@ (80008c8 <HAL_ETH_MspInit+0x184>)
 8000762:	4293      	cmp	r3, r2
 8000764:	f040 80ab 	bne.w	80008be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000768:	4b58      	ldr	r3, [pc, #352]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 800076a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076e:	4a57      	ldr	r2, [pc, #348]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000774:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000778:	4b54      	ldr	r3, [pc, #336]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 800077a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800077e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000782:	623b      	str	r3, [r7, #32]
 8000784:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000786:	4b51      	ldr	r3, [pc, #324]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800078c:	4a4f      	ldr	r2, [pc, #316]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 800078e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000792:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000796:	4b4d      	ldr	r3, [pc, #308]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000798:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800079c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007a0:	61fb      	str	r3, [r7, #28]
 80007a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80007a4:	4b49      	ldr	r3, [pc, #292]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007aa:	4a48      	ldr	r2, [pc, #288]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007b4:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b42      	ldr	r3, [pc, #264]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a40      	ldr	r2, [pc, #256]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b3e      	ldr	r3, [pc, #248]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b3a      	ldr	r3, [pc, #232]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a39      	ldr	r2, [pc, #228]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b36      	ldr	r3, [pc, #216]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b33      	ldr	r3, [pc, #204]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000804:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800080e:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800081c:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000822:	4a2a      	ldr	r2, [pc, #168]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 8000824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <HAL_ETH_MspInit+0x188>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800083a:	2332      	movs	r3, #50	@ 0x32
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084a:	230b      	movs	r3, #11
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	481e      	ldr	r0, [pc, #120]	@ (80008d0 <HAL_ETH_MspInit+0x18c>)
 8000856:	f001 f98d 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800085a:	2386      	movs	r3, #134	@ 0x86
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086a:	230b      	movs	r3, #11
 800086c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4817      	ldr	r0, [pc, #92]	@ (80008d4 <HAL_ETH_MspInit+0x190>)
 8000876:	f001 f97d 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088c:	230b      	movs	r3, #11
 800088e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <HAL_ETH_MspInit+0x194>)
 8000898:	f001 f96c 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800089c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <HAL_ETH_MspInit+0x198>)
 80008ba:	f001 f95b 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008be:	bf00      	nop
 80008c0:	3738      	adds	r7, #56	@ 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40028000 	.word	0x40028000
 80008cc:	58024400 	.word	0x58024400
 80008d0:	58020800 	.word	0x58020800
 80008d4:	58020000 	.word	0x58020000
 80008d8:	58020400 	.word	0x58020400
 80008dc:	58021800 	.word	0x58021800

080008e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <MX_FREERTOS_Init+0x18>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_FREERTOS_Init+0x1c>)
 80008ea:	f005 fe8d 	bl	8006608 <osThreadNew>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a03      	ldr	r2, [pc, #12]	@ (8000900 <MX_FREERTOS_Init+0x20>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08009248 	.word	0x08009248
 80008fc:	08000905 	.word	0x08000905
 8000900:	240001e4 	.word	0x240001e4

08000904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f005 ff0d 	bl	800672c <osDelay>
 8000912:	e7fb      	b.n	800090c <StartDefaultTask+0x8>

08000914 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	@ 0x30
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b71      	ldr	r3, [pc, #452]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	4a6f      	ldr	r2, [pc, #444]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093a:	4b6d      	ldr	r3, [pc, #436]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000948:	4b69      	ldr	r3, [pc, #420]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	4a68      	ldr	r2, [pc, #416]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000958:	4b65      	ldr	r3, [pc, #404]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b62      	ldr	r3, [pc, #392]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	4a60      	ldr	r2, [pc, #384]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000976:	4b5e      	ldr	r3, [pc, #376]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b5a      	ldr	r3, [pc, #360]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	4a59      	ldr	r2, [pc, #356]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000994:	4b56      	ldr	r3, [pc, #344]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b53      	ldr	r3, [pc, #332]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a51      	ldr	r2, [pc, #324]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b4f      	ldr	r3, [pc, #316]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c0:	4b4b      	ldr	r3, [pc, #300]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a4a      	ldr	r2, [pc, #296]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b47      	ldr	r3, [pc, #284]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a42      	ldr	r2, [pc, #264]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b40      	ldr	r3, [pc, #256]	@ (8000af0 <MX_GPIO_Init+0x1dc>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a02:	483c      	ldr	r0, [pc, #240]	@ (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a04:	f001 fa5e 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a0e:	483a      	ldr	r0, [pc, #232]	@ (8000af8 <MX_GPIO_Init+0x1e4>)
 8000a10:	f001 fa58 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2102      	movs	r1, #2
 8000a18:	4838      	ldr	r0, [pc, #224]	@ (8000afc <MX_GPIO_Init+0x1e8>)
 8000a1a:	f001 fa53 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <MX_GPIO_Init+0x1ec>)
 8000a34:	f001 f89e 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a38:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4828      	ldr	r0, [pc, #160]	@ (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a52:	f001 f88f 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4822      	ldr	r0, [pc, #136]	@ (8000af8 <MX_GPIO_Init+0x1e4>)
 8000a70:	f001 f880 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a74:	2380      	movs	r3, #128	@ 0x80
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a78:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	481e      	ldr	r0, [pc, #120]	@ (8000b04 <MX_GPIO_Init+0x1f0>)
 8000a8a:	f001 f873 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4819      	ldr	r0, [pc, #100]	@ (8000b08 <MX_GPIO_Init+0x1f4>)
 8000aa4:	f001 f866 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000aba:	230a      	movs	r3, #10
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4810      	ldr	r0, [pc, #64]	@ (8000b08 <MX_GPIO_Init+0x1f4>)
 8000ac6:	f001 f855 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_GPIO_Init+0x1e8>)
 8000ae2:	f001 f847 	bl	8001b74 <HAL_GPIO_Init>

}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	@ 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	58024400 	.word	0x58024400
 8000af4:	58020400 	.word	0x58020400
 8000af8:	58020c00 	.word	0x58020c00
 8000afc:	58021000 	.word	0x58021000
 8000b00:	58020800 	.word	0x58020800
 8000b04:	58021800 	.word	0x58021800
 8000b08:	58020000 	.word	0x58020000

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 faac 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f812 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff fefc 	bl	8000914 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b1c:	f7ff fdc6 	bl	80006ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b20:	f000 f9bc 	bl	8000e9c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b24:	f000 fa70 	bl	8001008 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  main_app();
 8000b28:	f7ff fd72 	bl	8000610 <main_app>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b2c:	f005 fd22 	bl	8006574 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b30:	f7ff fed6 	bl	80008e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b34:	f005 fd42 	bl	80065bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <main+0x2c>

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	@ 0x70
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	224c      	movs	r2, #76	@ 0x4c
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 fb14 	bl	8009178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2220      	movs	r2, #32
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f008 fb0e 	bl	8009178 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f001 f9cb 	bl	8001ef8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b7e:	bf00      	nop
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <SystemClock_Config+0xdc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b8c:	d1f8      	bne.n	8000b80 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b8e:	2321      	movs	r3, #33	@ 0x21
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b92:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000ba8:	f240 1313 	movw	r3, #275	@ 0x113
 8000bac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f9ce 	bl	8001f6c <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bd6:	f000 f833 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	233f      	movs	r3, #63	@ 0x3f
 8000bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2303      	movs	r3, #3
 8000be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000be6:	2308      	movs	r3, #8
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bea:	2340      	movs	r3, #64	@ 0x40
 8000bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bee:	2340      	movs	r3, #64	@ 0x40
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf8:	2340      	movs	r3, #64	@ 0x40
 8000bfa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2103      	movs	r1, #3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fd8d 	bl	8002720 <HAL_RCC_ClockConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c0c:	f000 f818 	bl	8000c40 <Error_Handler>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3770      	adds	r7, #112	@ 0x70
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	58024800 	.word	0x58024800

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 fa59 	bl	80010e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_MspInit+0x38>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_MspInit+0x38>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_MspInit+0x38>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	210f      	movs	r1, #15
 8000c74:	f06f 0001 	mvn.w	r0, #1
 8000c78:	f000 fb20 	bl	80012bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024400 	.word	0x58024400

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	@ 0x40
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	d827      	bhi.n	8000ce6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000c96:	2200      	movs	r2, #0
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	2036      	movs	r0, #54	@ 0x36
 8000c9c:	f000 fb0e 	bl	80012bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca0:	2036      	movs	r0, #54	@ 0x36
 8000ca2:	f000 fb25 	bl	80012f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ca6:	4a29      	ldr	r2, [pc, #164]	@ (8000d4c <HAL_InitTick+0xc4>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cac:	4b28      	ldr	r3, [pc, #160]	@ (8000d50 <HAL_InitTick+0xc8>)
 8000cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb2:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <HAL_InitTick+0xc8>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cbc:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <HAL_InitTick+0xc8>)
 8000cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 f8af 	bl	8002e38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d106      	bne.n	8000cf2 <HAL_InitTick+0x6a>
 8000ce4:	e001      	b.n	8000cea <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e02b      	b.n	8000d42 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cea:	f002 f879 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8000cee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000cf0:	e004      	b.n	8000cfc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf2:	f002 f875 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cfe:	4a15      	ldr	r2, [pc, #84]	@ (8000d54 <HAL_InitTick+0xcc>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	0c9b      	lsrs	r3, r3, #18
 8000d06:	3b01      	subs	r3, #1
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d0c:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <HAL_InitTick+0xd4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d18:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d2a:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d2c:	f003 fe88 	bl	8004a40 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d104      	bne.n	8000d40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d36:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <HAL_InitTick+0xd0>)
 8000d38:	f003 fee4 	bl	8004b04 <HAL_TIM_Base_Start_IT>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	e000      	b.n	8000d42 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3740      	adds	r7, #64	@ 0x40
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2400000c 	.word	0x2400000c
 8000d50:	58024400 	.word	0x58024400
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	240001e8 	.word	0x240001e8
 8000d5c:	40001000 	.word	0x40001000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <TIM6_DAC_IRQHandler+0x10>)
 8000d9e:	f003 ff37 	bl	8004c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	240001e8 	.word	0x240001e8

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db0:	4b32      	ldr	r3, [pc, #200]	@ (8000e7c <SystemInit+0xd0>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db6:	4a31      	ldr	r2, [pc, #196]	@ (8000e7c <SystemInit+0xd0>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <SystemInit+0xd4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d807      	bhi.n	8000ddc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <SystemInit+0xd4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 030f 	bic.w	r3, r3, #15
 8000dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8000e80 <SystemInit+0xd4>)
 8000dd6:	f043 0307 	orr.w	r3, r3, #7
 8000dda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <SystemInit+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <SystemInit+0xd8>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <SystemInit+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <SystemInit+0xd8>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4924      	ldr	r1, [pc, #144]	@ (8000e84 <SystemInit+0xd8>)
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <SystemInit+0xdc>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dfa:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <SystemInit+0xd4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d007      	beq.n	8000e16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <SystemInit+0xd4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f023 030f 	bic.w	r3, r3, #15
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <SystemInit+0xd4>)
 8000e10:	f043 0307 	orr.w	r3, r3, #7
 8000e14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <SystemInit+0xd8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <SystemInit+0xd8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <SystemInit+0xd8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <SystemInit+0xd8>)
 8000e2a:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <SystemInit+0xe0>)
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <SystemInit+0xd8>)
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <SystemInit+0xe4>)
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <SystemInit+0xd8>)
 8000e36:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <SystemInit+0xe8>)
 8000e38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <SystemInit+0xd8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e40:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <SystemInit+0xd8>)
 8000e42:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <SystemInit+0xe8>)
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <SystemInit+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <SystemInit+0xd8>)
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <SystemInit+0xe8>)
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <SystemInit+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <SystemInit+0xd8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a09      	ldr	r2, [pc, #36]	@ (8000e84 <SystemInit+0xd8>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <SystemInit+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <SystemInit+0xec>)
 8000e6c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	52002000 	.word	0x52002000
 8000e84:	58024400 	.word	0x58024400
 8000e88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e8c:	02020200 	.word	0x02020200
 8000e90:	01ff0000 	.word	0x01ff0000
 8000e94:	01010280 	.word	0x01010280
 8000e98:	52004000 	.word	0x52004000

08000e9c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ea2:	4a23      	ldr	r2, [pc, #140]	@ (8000f30 <MX_USART3_UART_Init+0x94>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ee6:	f004 f893 	bl	8005010 <HAL_UART_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ef0:	f7ff fea6 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000ef8:	f005 fa2d 	bl	8006356 <HAL_UARTEx_SetTxFifoThreshold>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f02:	f7ff fe9d 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000f0a:	f005 fa62 	bl	80063d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f14:	f7ff fe94 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_USART3_UART_Init+0x90>)
 8000f1a:	f005 f9e3 	bl	80062e4 <HAL_UARTEx_DisableFifoMode>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f24:	f7ff fe8c 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	24000234 	.word	0x24000234
 8000f30:	40004800 	.word	0x40004800

08000f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b8      	sub	sp, #224	@ 0xe0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	22b8      	movs	r2, #184	@ 0xb8
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f008 f90f 	bl	8009178 <memset>
  if(uartHandle->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a27      	ldr	r2, [pc, #156]	@ (8000ffc <HAL_UART_MspInit+0xc8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d146      	bne.n	8000ff2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	f04f 0202 	mov.w	r2, #2
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 ff9e 	bl	8002ebc <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f86:	f7ff fe5b 	bl	8000c40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_UART_MspInit+0xcc>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_UART_MspInit+0xcc>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0xcc>)
 8000f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0xcc>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <HAL_UART_MspInit+0xcc>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_UART_MspInit+0xcc>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000fc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <HAL_UART_MspInit+0xd0>)
 8000fee:	f000 fdc1 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	37e0      	adds	r7, #224	@ 0xe0
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40004800 	.word	0x40004800
 8001000:	58024400 	.word	0x58024400
 8001004:	58020c00 	.word	0x58020c00

08001008 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800101c:	f7ff fec6 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f008 f89f 	bl	8009188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fd5f 	bl	8000b0c <main>
  bx  lr
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001054:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001058:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 800105c:	080092b4 	.word	0x080092b4
  ldr r2, =_sbss
 8001060:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 8001064:	24004c1c 	.word	0x24004c1c

08001068 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC3_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	2003      	movs	r0, #3
 8001074:	f000 f917 	bl	80012a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001078:	f001 fd08 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 800107c:	4602      	mov	r2, r0
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_Init+0x68>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	4913      	ldr	r1, [pc, #76]	@ (80010d8 <HAL_Init+0x6c>)
 800108a:	5ccb      	ldrb	r3, [r1, r3]
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_Init+0x68>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_Init+0x6c>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <HAL_Init+0x70>)
 80010ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010b0:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_Init+0x74>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b6:	200f      	movs	r0, #15
 80010b8:	f7ff fde6 	bl	8000c88 <HAL_InitTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e002      	b.n	80010cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010c6:	f7ff fdc1 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024400 	.word	0x58024400
 80010d8:	0800926c 	.word	0x0800926c
 80010dc:	24000008 	.word	0x24000008
 80010e0:	24000004 	.word	0x24000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	24000010 	.word	0x24000010
 8001108:	240002c8 	.word	0x240002c8

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	240002c8 	.word	0x240002c8

08001124 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001134:	4904      	ldr	r1, [pc, #16]	@ (8001148 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58000400 	.word	0x58000400

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	@ (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff4c 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff63 	bl	8001194 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb3 	bl	8001240 <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff82 	bl	80011ec <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff56 	bl	80011b0 <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0e3      	b.n	80014e6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2223      	movs	r2, #35	@ 0x23
 800132c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fa07 	bl	8000744 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b6e      	ldr	r3, [pc, #440]	@ (80014f0 <HAL_ETH_Init+0x1e4>)
 8001338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800133c:	4a6c      	ldr	r2, [pc, #432]	@ (80014f0 <HAL_ETH_Init+0x1e4>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001346:	4b6a      	ldr	r3, [pc, #424]	@ (80014f0 <HAL_ETH_Init+0x1e4>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7a1b      	ldrb	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d103      	bne.n	8001364 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fee1 	bl	8001124 <HAL_SYSCFG_ETHInterfaceSelect>
 8001362:	e003      	b.n	800136c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001364:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001368:	f7ff fedc 	bl	8001124 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800136c:	4b61      	ldr	r3, [pc, #388]	@ (80014f4 <HAL_ETH_Init+0x1e8>)
 800136e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff fec0 	bl	800110c <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800138e:	e011      	b.n	80013b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001390:	f7ff febc 	bl	800110c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800139e:	d909      	bls.n	80013b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2204      	movs	r2, #4
 80013a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	22e0      	movs	r2, #224	@ 0xe0
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e098      	b.n	80014e6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e4      	bne.n	8001390 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f89e 	bl	8001508 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013cc:	f001 fcd8 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a49      	ldr	r2, [pc, #292]	@ (80014f8 <HAL_ETH_Init+0x1ec>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3a01      	subs	r2, #1
 80013e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fa81 	bl	80018ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80013f6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001402:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001406:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d009      	beq.n	800142a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	22e0      	movs	r2, #224	@ 0xe0
 8001422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e05d      	b.n	80014e6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001432:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <HAL_ETH_Init+0x1f0>)
 8001438:	4013      	ands	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6952      	ldr	r2, [r2, #20]
 800143e:	0051      	lsls	r1, r2, #1
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	430b      	orrs	r3, r1
 8001446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800144a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fae9 	bl	8001a26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fb2f 	bl	8001ab8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	3305      	adds	r3, #5
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021a      	lsls	r2, r3, #8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	3304      	adds	r3, #4
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	3303      	adds	r3, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	061a      	lsls	r2, r3, #24
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	3302      	adds	r3, #2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001498:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014a8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_ETH_Init+0x1f4>)
 80014ba:	430b      	orrs	r3, r1
 80014bc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_ETH_Init+0x1f8>)
 80014ce:	430b      	orrs	r3, r1
 80014d0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2210      	movs	r2, #16
 80014e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	58024400 	.word	0x58024400
 80014f4:	58000400 	.word	0x58000400
 80014f8:	431bde83 	.word	0x431bde83
 80014fc:	ffff8001 	.word	0xffff8001
 8001500:	0c020060 	.word	0x0c020060
 8001504:	0c20c000 	.word	0x0c20c000

08001508 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001518:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001520:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001522:	f001 fc2d 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8001526:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d804      	bhi.n	800153a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e022      	b.n	8001580 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4a16      	ldr	r2, [pc, #88]	@ (8001598 <HAL_ETH_SetMDIOClockRange+0x90>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d204      	bcs.n	800154c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e019      	b.n	8001580 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a13      	ldr	r2, [pc, #76]	@ (800159c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d915      	bls.n	8001580 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d804      	bhi.n	8001566 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e00c      	b.n	8001580 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d804      	bhi.n	8001578 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e003      	b.n	8001580 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800157e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	02160ebf 	.word	0x02160ebf
 8001598:	03938700 	.word	0x03938700
 800159c:	05f5e0ff 	.word	0x05f5e0ff
 80015a0:	08f0d17f 	.word	0x08f0d17f
 80015a4:	0ee6b27f 	.word	0x0ee6b27f

080015a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	791b      	ldrb	r3, [r3, #4]
 80015c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7b1b      	ldrb	r3, [r3, #12]
 80015c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	7b5b      	ldrb	r3, [r3, #13]
 80015d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	7b9b      	ldrb	r3, [r3, #14]
 80015d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	7bdb      	ldrb	r3, [r3, #15]
 80015e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	7c12      	ldrb	r2, [r2, #16]
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d102      	bne.n	80015f2 <ETH_SetMACConfig+0x4a>
 80015ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015f0:	e000      	b.n	80015f4 <ETH_SetMACConfig+0x4c>
 80015f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	7c52      	ldrb	r2, [r2, #17]
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d102      	bne.n	8001604 <ETH_SetMACConfig+0x5c>
 80015fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001602:	e000      	b.n	8001606 <ETH_SetMACConfig+0x5e>
 8001604:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7c9b      	ldrb	r3, [r3, #18]
 800160c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800160e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001614:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800161a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	7f1b      	ldrb	r3, [r3, #28]
 8001620:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7f5b      	ldrb	r3, [r3, #29]
 8001628:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800162a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	7f92      	ldrb	r2, [r2, #30]
 8001630:	2a00      	cmp	r2, #0
 8001632:	d102      	bne.n	800163a <ETH_SetMACConfig+0x92>
 8001634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001638:	e000      	b.n	800163c <ETH_SetMACConfig+0x94>
 800163a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800163c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	7fdb      	ldrb	r3, [r3, #31]
 8001642:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001644:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	f892 2020 	ldrb.w	r2, [r2, #32]
 800164c:	2a00      	cmp	r2, #0
 800164e:	d102      	bne.n	8001656 <ETH_SetMACConfig+0xae>
 8001650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001654:	e000      	b.n	8001658 <ETH_SetMACConfig+0xb0>
 8001656:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001658:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001666:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001668:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b56      	ldr	r3, [pc, #344]	@ (80017d4 <ETH_SetMACConfig+0x22c>)
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	68f9      	ldr	r1, [r7, #12]
 8001682:	430b      	orrs	r3, r1
 8001684:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001692:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001694:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800169c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800169e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	d102      	bne.n	80016ba <ETH_SetMACConfig+0x112>
 80016b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016b8:	e000      	b.n	80016bc <ETH_SetMACConfig+0x114>
 80016ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <ETH_SetMACConfig+0x230>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <ETH_SetMACConfig+0x234>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001704:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800170a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001712:	2a00      	cmp	r2, #0
 8001714:	d101      	bne.n	800171a <ETH_SetMACConfig+0x172>
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	e000      	b.n	800171c <ETH_SetMACConfig+0x174>
 800171a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800171c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001722:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001724:	4313      	orrs	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800172e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	430b      	orrs	r3, r1
 800173c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001744:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800174c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	f023 0103 	bic.w	r1, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	430a      	orrs	r2, r1
 8001766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001772:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800178e:	2a00      	cmp	r2, #0
 8001790:	d101      	bne.n	8001796 <ETH_SetMACConfig+0x1ee>
 8001792:	2240      	movs	r2, #64	@ 0x40
 8001794:	e000      	b.n	8001798 <ETH_SetMACConfig+0x1f0>
 8001796:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001798:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017b8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	00048083 	.word	0x00048083
 80017d8:	c0f88000 	.word	0xc0f88000
 80017dc:	fffffef0 	.word	0xfffffef0

080017e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <ETH_SetDMAConfig+0xf8>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6811      	ldr	r1, [r2, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001806:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	791b      	ldrb	r3, [r3, #4]
 800180c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001812:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	7b1b      	ldrb	r3, [r3, #12]
 8001818:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <ETH_SetDMAConfig+0xfc>)
 800182a:	4013      	ands	r3, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	430b      	orrs	r3, r1
 8001834:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001838:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001844:	4313      	orrs	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001850:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <ETH_SetDMAConfig+0x100>)
 8001856:	4013      	ands	r3, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	68f9      	ldr	r1, [r7, #12]
 800185e:	430b      	orrs	r3, r1
 8001860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001864:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7d1b      	ldrb	r3, [r3, #20]
 8001870:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001872:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7f5b      	ldrb	r3, [r3, #29]
 8001878:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001886:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <ETH_SetDMAConfig+0x104>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	68f9      	ldr	r1, [r7, #12]
 8001894:	430b      	orrs	r3, r1
 8001896:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800189a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7f1b      	ldrb	r3, [r3, #28]
 80018a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <ETH_SetDMAConfig+0x108>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018c8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	ffff87fd 	.word	0xffff87fd
 80018dc:	ffff2ffe 	.word	0xffff2ffe
 80018e0:	fffec000 	.word	0xfffec000
 80018e4:	ffc0efef 	.word	0xffc0efef
 80018e8:	7fc0ffff 	.word	0x7fc0ffff

080018ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0a4      	sub	sp, #144	@ 0x90
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018fa:	2300      	movs	r3, #0
 80018fc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800190a:	2301      	movs	r3, #1
 800190c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001922:	2301      	movs	r3, #1
 8001924:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001934:	2300      	movs	r3, #0
 8001936:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001944:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001948:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001966:	2300      	movs	r3, #0
 8001968:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800196a:	2300      	movs	r3, #0
 800196c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800196e:	2300      	movs	r3, #0
 8001970:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800197e:	2301      	movs	r3, #1
 8001980:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001984:	2320      	movs	r3, #32
 8001986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001996:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800199c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019a0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80019c6:	2300      	movs	r3, #0
 80019c8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fde6 	bl	80015a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019dc:	2301      	movs	r3, #1
 80019de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019e0:	2301      	movs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80019fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a0c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fee1 	bl	80017e0 <ETH_SetDMAConfig>
}
 8001a1e:	bf00      	nop
 8001a20:	3790      	adds	r7, #144	@ 0x90
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e01d      	b.n	8001a70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68d9      	ldr	r1, [r3, #12]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	3206      	adds	r2, #6
 8001a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d9de      	bls.n	8001a34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a84:	461a      	mov	r2, r3
 8001a86:	2303      	movs	r3, #3
 8001a88:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a98:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e023      	b.n	8001b0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6919      	ldr	r1, [r3, #16]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	3212      	adds	r2, #18
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d9d8      	bls.n	8001ac6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b62:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b82:	4b86      	ldr	r3, [pc, #536]	@ (8001d9c <HAL_GPIO_Init+0x228>)
 8001b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b86:	e18c      	b.n	8001ea2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 817e 	beq.w	8001e9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d005      	beq.n	8001bb8 <HAL_GPIO_Init+0x44>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d130      	bne.n	8001c1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 0201 	and.w	r2, r3, #1
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d017      	beq.n	8001c56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d123      	bne.n	8001caa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	69b9      	ldr	r1, [r7, #24]
 8001ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80d8 	beq.w	8001e9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cec:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <HAL_GPIO_Init+0x22c>)
 8001cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8001da0 <HAL_GPIO_Init+0x22c>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_GPIO_Init+0x22c>)
 8001cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <HAL_GPIO_Init+0x230>)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <HAL_GPIO_Init+0x234>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d04a      	beq.n	8001dcc <HAL_GPIO_Init+0x258>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_GPIO_Init+0x238>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02b      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_GPIO_Init+0x23c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_GPIO_Init+0x240>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_GPIO_Init+0x244>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x216>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <HAL_GPIO_Init+0x248>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <HAL_GPIO_Init+0x24c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x20e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <HAL_GPIO_Init+0x250>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x20a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_GPIO_Init+0x254>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x206>
 8001d76:	2309      	movs	r3, #9
 8001d78:	e029      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	e027      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e025      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e023      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e01f      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e01d      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e01b      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e019      	b.n	8001dce <HAL_GPIO_Init+0x25a>
 8001d9a:	bf00      	nop
 8001d9c:	58000080 	.word	0x58000080
 8001da0:	58024400 	.word	0x58024400
 8001da4:	58000400 	.word	0x58000400
 8001da8:	58020000 	.word	0x58020000
 8001dac:	58020400 	.word	0x58020400
 8001db0:	58020800 	.word	0x58020800
 8001db4:	58020c00 	.word	0x58020c00
 8001db8:	58021000 	.word	0x58021000
 8001dbc:	58021400 	.word	0x58021400
 8001dc0:	58021800 	.word	0x58021800
 8001dc4:	58021c00 	.word	0x58021c00
 8001dc8:	58022400 	.word	0x58022400
 8001dcc:	2300      	movs	r3, #0
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	f002 0203 	and.w	r2, r2, #3
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dde:	4938      	ldr	r1, [pc, #224]	@ (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f ae6b 	bne.w	8001b88 <HAL_GPIO_Init+0x14>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3724      	adds	r7, #36	@ 0x24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	58000400 	.word	0x58000400

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_PWREx_ConfigSupply+0x70>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d00a      	beq.n	8001f22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <HAL_PWREx_ConfigSupply+0x70>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01f      	b.n	8001f5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e01d      	b.n	8001f5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_PWREx_ConfigSupply+0x70>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	490f      	ldr	r1, [pc, #60]	@ (8001f68 <HAL_PWREx_ConfigSupply+0x70>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f32:	f7ff f8eb 	bl	800110c <HAL_GetTick>
 8001f36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f38:	e009      	b.n	8001f4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f3a:	f7ff f8e7 	bl	800110c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f48:	d901      	bls.n	8001f4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e007      	b.n	8001f5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_PWREx_ConfigSupply+0x70>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	58024800 	.word	0x58024800

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e3c8      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8c:	4b88      	ldr	r3, [pc, #544]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f96:	4b86      	ldr	r3, [pc, #536]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d007      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
 8001fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa4:	2b18      	cmp	r3, #24
 8001fa6:	d110      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e3a2      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b76      	ldr	r3, [pc, #472]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a75      	ldr	r2, [pc, #468]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b71      	ldr	r3, [pc, #452]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a70      	ldr	r2, [pc, #448]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6d      	ldr	r2, [pc, #436]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b68      	ldr	r3, [pc, #416]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a67      	ldr	r2, [pc, #412]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b65      	ldr	r3, [pc, #404]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a64      	ldr	r2, [pc, #400]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b61      	ldr	r3, [pc, #388]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a60      	ldr	r2, [pc, #384]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b5e      	ldr	r3, [pc, #376]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a5d      	ldr	r2, [pc, #372]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff f860 	bl	800110c <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f85c 	bl	800110c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e356      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002062:	4b53      	ldr	r3, [pc, #332]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f84c 	bl	800110c <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff f848 	bl	800110c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	@ 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e342      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800208a:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 808c 	beq.w	80021c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a8:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020b2:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_RCC_OscConfig+0x162>
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2b18      	cmp	r3, #24
 80020c2:	d137      	bne.n	8002134 <HAL_RCC_OscConfig+0x1c8>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d132      	bne.n	8002134 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ce:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e314      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020e6:	4b32      	ldr	r3, [pc, #200]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0219 	bic.w	r2, r3, #25
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	492f      	ldr	r1, [pc, #188]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff f808 	bl	800110c <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7ff f804 	bl	800110c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e2fe      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002112:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	4920      	ldr	r1, [pc, #128]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002132:	e045      	b.n	80021c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d026      	beq.n	800218a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800213c:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 0219 	bic.w	r2, r3, #25
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4919      	ldr	r1, [pc, #100]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe ffdd 	bl	800110c <HAL_GetTick>
 8002152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002156:	f7fe ffd9 	bl	800110c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e2d3      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	490b      	ldr	r1, [pc, #44]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
 8002188:	e01a      	b.n	80021c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_RCC_OscConfig+0x244>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe ffb9 	bl	800110c <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219e:	f7fe ffb5 	bl	800110c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d903      	bls.n	80021b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e2af      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
 80021b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021b4:	4b96      	ldr	r3, [pc, #600]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d06a      	beq.n	80022a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021cc:	4b90      	ldr	r3, [pc, #576]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d007      	beq.n	80021f2 <HAL_RCC_OscConfig+0x286>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b18      	cmp	r3, #24
 80021e6:	d11b      	bne.n	8002220 <HAL_RCC_OscConfig+0x2b4>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021f2:	4b87      	ldr	r3, [pc, #540]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x29e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b80      	cmp	r3, #128	@ 0x80
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e282      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800220a:	4b81      	ldr	r3, [pc, #516]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	497d      	ldr	r1, [pc, #500]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800221e:	e040      	b.n	80022a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002228:	4b79      	ldr	r3, [pc, #484]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a78      	ldr	r2, [pc, #480]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800222e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe ff6a 	bl	800110c <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800223c:	f7fe ff66 	bl	800110c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e260      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800224e:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800225a:	4b6d      	ldr	r3, [pc, #436]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	061b      	lsls	r3, r3, #24
 8002268:	4969      	ldr	r1, [pc, #420]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800226a:	4313      	orrs	r3, r2
 800226c:	60cb      	str	r3, [r1, #12]
 800226e:	e018      	b.n	80022a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002270:	4b67      	ldr	r3, [pc, #412]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a66      	ldr	r2, [pc, #408]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff46 	bl	800110c <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002284:	f7fe ff42 	bl	800110c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e23c      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002296:	4b5e      	ldr	r3, [pc, #376]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b56      	ldr	r3, [pc, #344]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ba:	4a55      	ldr	r2, [pc, #340]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe ff23 	bl	800110c <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe ff1f 	bl	800110c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e219      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x35e>
 80022e8:	e018      	b.n	800231c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ee:	4a48      	ldr	r2, [pc, #288]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff09 	bl	800110c <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe ff05 	bl	800110c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1ff      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002310:	4b3f      	ldr	r3, [pc, #252]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d036      	beq.n	8002396 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d019      	beq.n	8002364 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002330:	4b37      	ldr	r3, [pc, #220]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a36      	ldr	r2, [pc, #216]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800233a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800233c:	f7fe fee6 	bl	800110c <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002344:	f7fe fee2 	bl	800110c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1dc      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002356:	4b2e      	ldr	r3, [pc, #184]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x3d8>
 8002362:	e018      	b.n	8002396 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a29      	ldr	r2, [pc, #164]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800236a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800236e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002370:	f7fe fecc 	bl	800110c <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002378:	f7fe fec8 	bl	800110c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1c2      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800238a:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8086 	beq.w	80024b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x4a8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002414 <HAL_RCC_OscConfig+0x4a8>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023b0:	f7fe feac 	bl	800110c <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe fea8 	bl	800110c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1a2      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_RCC_OscConfig+0x4a8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x480>
 80023de:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ea:	e032      	b.n	8002452 <HAL_RCC_OscConfig+0x4e6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_RCC_OscConfig+0x4ac>
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002404:	4a02      	ldr	r2, [pc, #8]	@ (8002410 <HAL_RCC_OscConfig+0x4a4>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6713      	str	r3, [r2, #112]	@ 0x70
 800240c:	e021      	b.n	8002452 <HAL_RCC_OscConfig+0x4e6>
 800240e:	bf00      	nop
 8002410:	58024400 	.word	0x58024400
 8002414:	58024800 	.word	0x58024800
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x4ce>
 8002420:	4b83      	ldr	r3, [pc, #524]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	4a82      	ldr	r2, [pc, #520]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6713      	str	r3, [r2, #112]	@ 0x70
 800242c:	4b80      	ldr	r3, [pc, #512]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	4a7f      	ldr	r2, [pc, #508]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	@ 0x70
 8002438:	e00b      	b.n	8002452 <HAL_RCC_OscConfig+0x4e6>
 800243a:	4b7d      	ldr	r3, [pc, #500]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	4a7c      	ldr	r2, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	@ 0x70
 8002446:	4b7a      	ldr	r3, [pc, #488]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244a:	4a79      	ldr	r2, [pc, #484]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fe57 	bl	800110c <HAL_GetTick>
 800245e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fe53 	bl	800110c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e14b      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002478:	4b6d      	ldr	r3, [pc, #436]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RCC_OscConfig+0x4f6>
 8002484:	e014      	b.n	80024b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7fe fe41 	bl	800110c <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe fe3d 	bl	800110c <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e135      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024a4:	4b62      	ldr	r3, [pc, #392]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 812a 	beq.w	800270e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024c2:	2b18      	cmp	r3, #24
 80024c4:	f000 80ba 	beq.w	800263c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f040 8095 	bne.w	80025fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a56      	ldr	r2, [pc, #344]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80024d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fe15 	bl	800110c <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fe11 	bl	800110c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e10b      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002504:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002508:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <HAL_RCC_OscConfig+0x6c8>)
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	430a      	orrs	r2, r1
 8002518:	4945      	ldr	r1, [pc, #276]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	628b      	str	r3, [r1, #40]	@ 0x28
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	3b01      	subs	r3, #1
 8002524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252c:	3b01      	subs	r3, #1
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	b29b      	uxth	r3, r3
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	3b01      	subs	r3, #1
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002546:	3b01      	subs	r3, #1
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800254e:	4938      	ldr	r1, [pc, #224]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002554:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	4a35      	ldr	r2, [pc, #212]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002564:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <HAL_RCC_OscConfig+0x6cc>)
 8002566:	4013      	ands	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800256c:	00d2      	lsls	r2, r2, #3
 800256e:	4930      	ldr	r1, [pc, #192]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002574:	4b2e      	ldr	r3, [pc, #184]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	f023 020c 	bic.w	r2, r3, #12
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	492b      	ldr	r1, [pc, #172]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	f023 0202 	bic.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4927      	ldr	r1, [pc, #156]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002598:	4b25      	ldr	r3, [pc, #148]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	4a24      	ldr	r2, [pc, #144]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a4:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80025bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a18      	ldr	r2, [pc, #96]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fd9a 	bl	800110c <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fd96 	bl	800110c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e090      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x670>
 80025fa:	e088      	b.n	800270e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fd80 	bl	800110c <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe fd7c 	bl	800110c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e076      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002622:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_RCC_OscConfig+0x6c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x6a4>
 800262e:	e06e      	b.n	800270e <HAL_RCC_OscConfig+0x7a2>
 8002630:	58024400 	.word	0x58024400
 8002634:	fffffc0c 	.word	0xfffffc0c
 8002638:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002642:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	2b01      	cmp	r3, #1
 800264e:	d031      	beq.n	80026b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f003 0203 	and.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d12a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d122      	bne.n	80026b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	0a5b      	lsrs	r3, r3, #9
 8002682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d111      	bne.n	80026b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	0e1b      	lsrs	r3, r3, #24
 80026a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e02b      	b.n	8002710 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026b8:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d01f      	beq.n	800270e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80026ce:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	4a11      	ldr	r2, [pc, #68]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026da:	f7fe fd17 	bl	800110c <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026e0:	bf00      	nop
 80026e2:	f7fe fd13 	bl	800110c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d0f9      	beq.n	80026e2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 80026f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f2:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <HAL_RCC_OscConfig+0x7b0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026fa:	00d2      	lsls	r2, r2, #3
 80026fc:	4906      	ldr	r1, [pc, #24]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <HAL_RCC_OscConfig+0x7ac>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3730      	adds	r7, #48	@ 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58024400 	.word	0x58024400
 800271c:	ffff0007 	.word	0xffff0007

08002720 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e19c      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b8a      	ldr	r3, [pc, #552]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b87      	ldr	r3, [pc, #540]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 020f 	bic.w	r2, r3, #15
 800274a:	4985      	ldr	r1, [pc, #532]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b83      	ldr	r3, [pc, #524]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e184      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	4b7b      	ldr	r3, [pc, #492]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277c:	429a      	cmp	r2, r3
 800277e:	d908      	bls.n	8002792 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002780:	4b78      	ldr	r3, [pc, #480]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4975      	ldr	r1, [pc, #468]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 800278e:	4313      	orrs	r3, r2
 8002790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d010      	beq.n	80027c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	4b70      	ldr	r3, [pc, #448]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d908      	bls.n	80027c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	496a      	ldr	r1, [pc, #424]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d010      	beq.n	80027ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	4b64      	ldr	r3, [pc, #400]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027d8:	429a      	cmp	r2, r3
 80027da:	d908      	bls.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027dc:	4b61      	ldr	r3, [pc, #388]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	495e      	ldr	r1, [pc, #376]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002806:	429a      	cmp	r2, r3
 8002808:	d908      	bls.n	800281c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800280a:	4b56      	ldr	r3, [pc, #344]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4953      	ldr	r1, [pc, #332]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002818:	4313      	orrs	r3, r2
 800281a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d010      	beq.n	800284a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	4b4d      	ldr	r3, [pc, #308]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	429a      	cmp	r2, r3
 8002836:	d908      	bls.n	800284a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f023 020f 	bic.w	r2, r3, #15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4947      	ldr	r1, [pc, #284]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002846:	4313      	orrs	r3, r2
 8002848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d055      	beq.n	8002902 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002856:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4940      	ldr	r1, [pc, #256]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002864:	4313      	orrs	r3, r2
 8002866:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d107      	bne.n	8002880 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002870:	4b3c      	ldr	r3, [pc, #240]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d121      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0f6      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002888:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d115      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0ea      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a0:	4b30      	ldr	r3, [pc, #192]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0de      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0d6      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c0:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f023 0207 	bic.w	r2, r3, #7
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4925      	ldr	r1, [pc, #148]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d2:	f7fe fc1b 	bl	800110c <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028da:	f7fe fc17 	bl	800110c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0be      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	429a      	cmp	r2, r3
 8002900:	d1eb      	bne.n	80028da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	429a      	cmp	r2, r3
 800291c:	d208      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f023 020f 	bic.w	r2, r3, #15
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	490e      	ldr	r1, [pc, #56]	@ (8002964 <HAL_RCC_ClockConfig+0x244>)
 800292c:	4313      	orrs	r3, r2
 800292e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d214      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 020f 	bic.w	r2, r3, #15
 8002946:	4906      	ldr	r1, [pc, #24]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_RCC_ClockConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e086      	b.n	8002a6e <HAL_RCC_ClockConfig+0x34e>
 8002960:	52002000 	.word	0x52002000
 8002964:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002980:	429a      	cmp	r2, r3
 8002982:	d208      	bcs.n	8002996 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002984:	4b3c      	ldr	r3, [pc, #240]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	4939      	ldr	r1, [pc, #228]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002992:	4313      	orrs	r3, r2
 8002994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d208      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029b2:	4b31      	ldr	r3, [pc, #196]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	492e      	ldr	r1, [pc, #184]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029dc:	429a      	cmp	r2, r3
 80029de:	d208      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029e0:	4b25      	ldr	r3, [pc, #148]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4922      	ldr	r1, [pc, #136]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d208      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4917      	ldr	r1, [pc, #92]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a20:	f000 f834 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	4912      	ldr	r1, [pc, #72]	@ (8002a7c <HAL_RCC_ClockConfig+0x35c>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <HAL_RCC_ClockConfig+0x358>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	4a0d      	ldr	r2, [pc, #52]	@ (8002a7c <HAL_RCC_ClockConfig+0x35c>)
 8002a48:	5cd3      	ldrb	r3, [r2, r3]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <HAL_RCC_ClockConfig+0x360>)
 8002a56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a58:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <HAL_RCC_ClockConfig+0x364>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <HAL_RCC_ClockConfig+0x368>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f910 	bl	8000c88 <HAL_InitTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	0800926c 	.word	0x0800926c
 8002a80:	24000008 	.word	0x24000008
 8002a84:	24000004 	.word	0x24000004
 8002a88:	2400000c 	.word	0x2400000c

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	@ 0x24
 8002a90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a92:	4bb3      	ldr	r3, [pc, #716]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a9a:	2b18      	cmp	r3, #24
 8002a9c:	f200 8155 	bhi.w	8002d4a <HAL_RCC_GetSysClockFreq+0x2be>
 8002aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002b0d 	.word	0x08002b0d
 8002aac:	08002d4b 	.word	0x08002d4b
 8002ab0:	08002d4b 	.word	0x08002d4b
 8002ab4:	08002d4b 	.word	0x08002d4b
 8002ab8:	08002d4b 	.word	0x08002d4b
 8002abc:	08002d4b 	.word	0x08002d4b
 8002ac0:	08002d4b 	.word	0x08002d4b
 8002ac4:	08002d4b 	.word	0x08002d4b
 8002ac8:	08002b33 	.word	0x08002b33
 8002acc:	08002d4b 	.word	0x08002d4b
 8002ad0:	08002d4b 	.word	0x08002d4b
 8002ad4:	08002d4b 	.word	0x08002d4b
 8002ad8:	08002d4b 	.word	0x08002d4b
 8002adc:	08002d4b 	.word	0x08002d4b
 8002ae0:	08002d4b 	.word	0x08002d4b
 8002ae4:	08002d4b 	.word	0x08002d4b
 8002ae8:	08002b39 	.word	0x08002b39
 8002aec:	08002d4b 	.word	0x08002d4b
 8002af0:	08002d4b 	.word	0x08002d4b
 8002af4:	08002d4b 	.word	0x08002d4b
 8002af8:	08002d4b 	.word	0x08002d4b
 8002afc:	08002d4b 	.word	0x08002d4b
 8002b00:	08002d4b 	.word	0x08002d4b
 8002b04:	08002d4b 	.word	0x08002d4b
 8002b08:	08002b3f 	.word	0x08002b3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b0c:	4b94      	ldr	r3, [pc, #592]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b18:	4b91      	ldr	r3, [pc, #580]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	4a90      	ldr	r2, [pc, #576]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b2a:	e111      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b2e:	61bb      	str	r3, [r7, #24]
      break;
 8002b30:	e10e      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b32:	4b8d      	ldr	r3, [pc, #564]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b34:	61bb      	str	r3, [r7, #24]
      break;
 8002b36:	e10b      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b38:	4b8c      	ldr	r3, [pc, #560]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b3a:	61bb      	str	r3, [r7, #24]
      break;
 8002b3c:	e108      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b3e:	4b88      	ldr	r3, [pc, #544]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b48:	4b85      	ldr	r3, [pc, #532]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b54:	4b82      	ldr	r3, [pc, #520]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b5e:	4b80      	ldr	r3, [pc, #512]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80e1 	beq.w	8002d44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	f000 8083 	beq.w	8002c90 <HAL_RCC_GetSysClockFreq+0x204>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f200 80a1 	bhi.w	8002cd4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x114>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d056      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b9e:	e099      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02d      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bac:	4b6c      	ldr	r3, [pc, #432]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	4a6b      	ldr	r2, [pc, #428]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd6:	4b62      	ldr	r3, [pc, #392]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c06:	e087      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c1a:	4b51      	ldr	r3, [pc, #324]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c4a:	e065      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c5e:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c8e:	e043      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cd2:	e021      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	0a5b      	lsrs	r3, r3, #9
 8002d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d22:	3301      	adds	r3, #1
 8002d24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3c:	ee17 3a90 	vmov	r3, s15
 8002d40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d42:	e005      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
      break;
 8002d48:	e002      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d4c:	61bb      	str	r3, [r7, #24]
      break;
 8002d4e:	bf00      	nop
  }

  return sysclockfreq;
 8002d50:	69bb      	ldr	r3, [r7, #24]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	58024400 	.word	0x58024400
 8002d64:	03d09000 	.word	0x03d09000
 8002d68:	003d0900 	.word	0x003d0900
 8002d6c:	007a1200 	.word	0x007a1200
 8002d70:	46000000 	.word	0x46000000
 8002d74:	4c742400 	.word	0x4c742400
 8002d78:	4a742400 	.word	0x4a742400
 8002d7c:	4af42400 	.word	0x4af42400

08002d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d86:	f7ff fe81 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	490f      	ldr	r1, [pc, #60]	@ (8002dd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d98:	5ccb      	ldrb	r3, [r1, r3]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	58024400 	.word	0x58024400
 8002dd4:	0800926c 	.word	0x0800926c
 8002dd8:	24000008 	.word	0x24000008
 8002ddc:	24000004 	.word	0x24000004

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002de4:	f7ff ffcc 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4904      	ldr	r1, [pc, #16]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58024400 	.word	0x58024400
 8002e08:	0800926c 	.word	0x0800926c

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e10:	f7ff ffb6 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4904      	ldr	r1, [pc, #16]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	58024400 	.word	0x58024400
 8002e34:	0800926c 	.word	0x0800926c

08002e38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223f      	movs	r2, #63	@ 0x3f
 8002e46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e48:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0207 	and.w	r2, r3, #7
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002e54:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002e78:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002e90:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_RCC_GetClockConfig+0x80>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	601a      	str	r2, [r3, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	52002000 	.word	0x52002000

08002ebc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b0c6      	sub	sp, #280	@ 0x118
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	ea54 0305 	orrs.w	r3, r4, r5
 8002ee6:	d049      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ef2:	d02f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ef4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ef8:	d828      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002efa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002efe:	d01a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f04:	d822      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f0e:	d007      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f10:	e01c      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f12:	4bab      	ldr	r3, [pc, #684]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	4aaa      	ldr	r2, [pc, #680]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f1e:	e01a      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f24:	3308      	adds	r3, #8
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fc25 	bl	8004778 <RCCEx_PLL2_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f34:	e00f      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f3a:	3328      	adds	r3, #40	@ 0x28
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 fccc 	bl	80048dc <RCCEx_PLL3_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f4a:	e004      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f5e:	4b98      	ldr	r3, [pc, #608]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f6c:	4a94      	ldr	r2, [pc, #592]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f72:	e003      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002f88:	f04f 0900 	mov.w	r9, #0
 8002f8c:	ea58 0309 	orrs.w	r3, r8, r9
 8002f90:	d047      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d82a      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fb9 	.word	0x08002fb9
 8002fa8:	08002fc7 	.word	0x08002fc7
 8002fac:	08002fdd 	.word	0x08002fdd
 8002fb0:	08002ffb 	.word	0x08002ffb
 8002fb4:	08002ffb 	.word	0x08002ffb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4b81      	ldr	r3, [pc, #516]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	4a80      	ldr	r2, [pc, #512]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fc4:	e01a      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fca:	3308      	adds	r3, #8
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fbd2 	bl	8004778 <RCCEx_PLL2_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fda:	e00f      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fe0:	3328      	adds	r3, #40	@ 0x28
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fc79 	bl	80048dc <RCCEx_PLL3_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003004:	4b6e      	ldr	r3, [pc, #440]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	f023 0107 	bic.w	r1, r3, #7
 800300c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	4a6b      	ldr	r2, [pc, #428]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6513      	str	r3, [r2, #80]	@ 0x50
 8003018:	e003      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800301e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800302e:	f04f 0b00 	mov.w	fp, #0
 8003032:	ea5a 030b 	orrs.w	r3, sl, fp
 8003036:	d05b      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800303c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003040:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003044:	d03b      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003046:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800304a:	d834      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800304c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003050:	d037      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003056:	d82e      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003058:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800305c:	d033      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800305e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003062:	d828      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003068:	d01a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800306a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306e:	d822      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003078:	d007      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800307a:	e01c      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800307c:	4b50      	ldr	r3, [pc, #320]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	4a4f      	ldr	r2, [pc, #316]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003088:	e01e      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800308a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800308e:	3308      	adds	r3, #8
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f001 fb70 	bl	8004778 <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800309e:	e013      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a4:	3328      	adds	r3, #40	@ 0x28
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fc17 	bl	80048dc <RCCEx_PLL3_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b4:	e008      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030bc:	e004      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80030c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030d0:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80030d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030e0:	4a37      	ldr	r2, [pc, #220]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80030fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003106:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800310a:	460b      	mov	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	d05d      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003118:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800311c:	d03b      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800311e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003122:	d834      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003124:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003128:	d037      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800312a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800312e:	d82e      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003130:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003134:	d033      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800313a:	d828      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800313c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003140:	d01a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003146:	d822      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003150:	d007      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003152:	e01c      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003154:	4b1a      	ldr	r3, [pc, #104]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	4a19      	ldr	r2, [pc, #100]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800315a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800315e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003160:	e01e      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003166:	3308      	adds	r3, #8
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fb04 	bl	8004778 <RCCEx_PLL2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003176:	e013      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800317c:	3328      	adds	r3, #40	@ 0x28
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fbab 	bl	80048dc <RCCEx_PLL3_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800318c:	e008      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003194:	e004      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800319e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80031b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80031b8:	4a01      	ldr	r2, [pc, #4]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031be:	e005      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80031e2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4313      	orrs	r3, r2
 80031ea:	d03a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80031ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	2b30      	cmp	r3, #48	@ 0x30
 80031f4:	d01f      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80031f6:	2b30      	cmp	r3, #48	@ 0x30
 80031f8:	d819      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d00c      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d815      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d019      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003206:	2b10      	cmp	r3, #16
 8003208:	d111      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320a:	4baa      	ldr	r3, [pc, #680]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	4aa9      	ldr	r2, [pc, #676]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003216:	e011      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	3308      	adds	r3, #8
 800321e:	2102      	movs	r1, #2
 8003220:	4618      	mov	r0, r3
 8003222:	f001 faa9 	bl	8004778 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800323a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003244:	4b9b      	ldr	r3, [pc, #620]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003248:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800324c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	4a98      	ldr	r2, [pc, #608]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003254:	430b      	orrs	r3, r1
 8003256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800325e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800326e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003278:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800327c:	460b      	mov	r3, r1
 800327e:	4313      	orrs	r3, r2
 8003280:	d051      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800328c:	d035      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800328e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003292:	d82e      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003298:	d031      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800329a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800329e:	d828      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a4:	d01a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80032a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032aa:	d822      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d007      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80032b6:	e01c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b8:	4b7e      	ldr	r3, [pc, #504]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4a7d      	ldr	r2, [pc, #500]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032c4:	e01c      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ca:	3308      	adds	r3, #8
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fa52 	bl	8004778 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032da:	e011      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 faf9 	bl	80048dc <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032f8:	e002      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80032fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003308:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800330a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	4a67      	ldr	r2, [pc, #412]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6513      	str	r3, [r2, #80]	@ 0x50
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003322:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003332:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800333c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d053      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003350:	d033      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003356:	d82c      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800335c:	d02f      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x502>
 800335e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003362:	d826      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003368:	d02b      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800336a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800336e:	d820      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003374:	d012      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800337a:	d81a      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d022      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d115      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338a:	3308      	adds	r3, #8
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f001 f9f2 	bl	8004778 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800339a:	e015      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800339c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a0:	3328      	adds	r3, #40	@ 0x28
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fa99 	bl	80048dc <RCCEx_PLL3_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80033b0:	e00a      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80033c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033d0:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033de:	4a35      	ldr	r2, [pc, #212]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003404:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003408:	460b      	mov	r3, r1
 800340a:	4313      	orrs	r3, r2
 800340c:	d058      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800341a:	d033      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003420:	d82c      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d02f      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d826      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800342e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003432:	d02b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003438:	d820      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800343a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800343e:	d012      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003444:	d81a      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d022      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800344a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800344e:	d115      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003454:	3308      	adds	r3, #8
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f001 f98d 	bl	8004778 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003464:	e015      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346a:	3328      	adds	r3, #40	@ 0x28
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f001 fa34 	bl	80048dc <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800347a:	e00a      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003482:	e006      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003484:	bf00      	nop
 8003486:	e004      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10e      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800349a:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034aa:	4a02      	ldr	r2, [pc, #8]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d037      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ea:	d00e      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80034ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034f0:	d816      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80034f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034fa:	d111      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4bc4      	ldr	r3, [pc, #784]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4ac3      	ldr	r2, [pc, #780]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003508:	e00f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350e:	3308      	adds	r3, #8
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f930 	bl	8004778 <RCCEx_PLL2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003532:	4bb7      	ldr	r3, [pc, #732]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003536:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003540:	4ab3      	ldr	r2, [pc, #716]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003542:	430b      	orrs	r3, r1
 8003544:	6513      	str	r3, [r2, #80]	@ 0x50
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800354c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800355c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003566:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d039      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003576:	2b03      	cmp	r3, #3
 8003578:	d81c      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035bd 	.word	0x080035bd
 8003584:	08003591 	.word	0x08003591
 8003588:	0800359f 	.word	0x0800359f
 800358c:	080035bd 	.word	0x080035bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b9f      	ldr	r3, [pc, #636]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a9e      	ldr	r2, [pc, #632]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800359c:	e00f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800359e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a2:	3308      	adds	r3, #8
 80035a4:	2102      	movs	r1, #2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 f8e6 	bl	8004778 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035c6:	4b92      	ldr	r3, [pc, #584]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	f023 0103 	bic.w	r1, r3, #3
 80035ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	f000 8099 	beq.w	8003738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003606:	4b83      	ldr	r3, [pc, #524]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a82      	ldr	r2, [pc, #520]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003612:	f7fd fd7b 	bl	800110c <HAL_GetTick>
 8003616:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361a:	e00b      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fd fd76 	bl	800110c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	@ 0x64
 800362a:	d903      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003632:	e005      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003634:	4b77      	ldr	r3, [pc, #476]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ed      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003644:	2b00      	cmp	r3, #0
 8003646:	d173      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003648:	4b71      	ldr	r3, [pc, #452]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800364a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800364c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003654:	4053      	eors	r3, r2
 8003656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800365e:	4b6c      	ldr	r3, [pc, #432]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003666:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800366a:	4b69      	ldr	r3, [pc, #420]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	4a68      	ldr	r2, [pc, #416]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003674:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003682:	4a63      	ldr	r2, [pc, #396]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800368a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003696:	d118      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fd38 	bl	800110c <HAL_GetTick>
 800369c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a0:	e00d      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd fd33 	bl	800110c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80036ac:	1ad2      	subs	r2, r2, r3
 80036ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d903      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80036bc:	e005      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036be:	4b54      	ldr	r3, [pc, #336]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0eb      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80036ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d129      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e2:	d10e      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80036e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80036ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036f4:	091a      	lsrs	r2, r3, #4
 80036f6:	4b48      	ldr	r3, [pc, #288]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	4a45      	ldr	r2, [pc, #276]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6113      	str	r3, [r2, #16]
 8003700:	e005      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003702:	4b43      	ldr	r3, [pc, #268]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	4a42      	ldr	r2, [pc, #264]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003708:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800370c:	6113      	str	r3, [r2, #16]
 800370e:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003710:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	4a3c      	ldr	r2, [pc, #240]	@ (8003810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003720:	430b      	orrs	r3, r1
 8003722:	6713      	str	r3, [r2, #112]	@ 0x70
 8003724:	e008      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800372a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 0301 	and.w	r3, r2, #1
 8003744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800374e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	f000 808f 	beq.w	8003878 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003760:	2b28      	cmp	r3, #40	@ 0x28
 8003762:	d871      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	08003851 	.word	0x08003851
 8003770:	08003849 	.word	0x08003849
 8003774:	08003849 	.word	0x08003849
 8003778:	08003849 	.word	0x08003849
 800377c:	08003849 	.word	0x08003849
 8003780:	08003849 	.word	0x08003849
 8003784:	08003849 	.word	0x08003849
 8003788:	08003849 	.word	0x08003849
 800378c:	0800381d 	.word	0x0800381d
 8003790:	08003849 	.word	0x08003849
 8003794:	08003849 	.word	0x08003849
 8003798:	08003849 	.word	0x08003849
 800379c:	08003849 	.word	0x08003849
 80037a0:	08003849 	.word	0x08003849
 80037a4:	08003849 	.word	0x08003849
 80037a8:	08003849 	.word	0x08003849
 80037ac:	08003833 	.word	0x08003833
 80037b0:	08003849 	.word	0x08003849
 80037b4:	08003849 	.word	0x08003849
 80037b8:	08003849 	.word	0x08003849
 80037bc:	08003849 	.word	0x08003849
 80037c0:	08003849 	.word	0x08003849
 80037c4:	08003849 	.word	0x08003849
 80037c8:	08003849 	.word	0x08003849
 80037cc:	08003851 	.word	0x08003851
 80037d0:	08003849 	.word	0x08003849
 80037d4:	08003849 	.word	0x08003849
 80037d8:	08003849 	.word	0x08003849
 80037dc:	08003849 	.word	0x08003849
 80037e0:	08003849 	.word	0x08003849
 80037e4:	08003849 	.word	0x08003849
 80037e8:	08003849 	.word	0x08003849
 80037ec:	08003851 	.word	0x08003851
 80037f0:	08003849 	.word	0x08003849
 80037f4:	08003849 	.word	0x08003849
 80037f8:	08003849 	.word	0x08003849
 80037fc:	08003849 	.word	0x08003849
 8003800:	08003849 	.word	0x08003849
 8003804:	08003849 	.word	0x08003849
 8003808:	08003849 	.word	0x08003849
 800380c:	08003851 	.word	0x08003851
 8003810:	58024400 	.word	0x58024400
 8003814:	58024800 	.word	0x58024800
 8003818:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003820:	3308      	adds	r3, #8
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ffa7 	bl	8004778 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	3328      	adds	r3, #40	@ 0x28
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f84e 	bl	80048dc <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800385a:	4bbf      	ldr	r3, [pc, #764]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003868:	4abb      	ldr	r2, [pc, #748]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800386a:	430b      	orrs	r3, r1
 800386c:	6553      	str	r3, [r2, #84]	@ 0x54
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f002 0302 	and.w	r3, r2, #2
 8003884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800388e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d041      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800389c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d824      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80038a2:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038f5 	.word	0x080038f5
 80038ac:	080038c1 	.word	0x080038c1
 80038b0:	080038d7 	.word	0x080038d7
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	080038f5 	.word	0x080038f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	3308      	adds	r3, #8
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 ff55 	bl	8004778 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038d4:	e00f      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038da:	3328      	adds	r3, #40	@ 0x28
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fffc 	bl	80048dc <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038ea:	e004      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80038f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038fe:	4b96      	ldr	r3, [pc, #600]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f023 0107 	bic.w	r1, r3, #7
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390c:	4a92      	ldr	r2, [pc, #584]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800390e:	430b      	orrs	r3, r1
 8003910:	6553      	str	r3, [r2, #84]	@ 0x54
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003918:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 0304 	and.w	r3, r2, #4
 8003928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003932:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d044      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003944:	2b05      	cmp	r3, #5
 8003946:	d825      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003948:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	0800399d 	.word	0x0800399d
 8003954:	08003969 	.word	0x08003969
 8003958:	0800397f 	.word	0x0800397f
 800395c:	0800399d 	.word	0x0800399d
 8003960:	0800399d 	.word	0x0800399d
 8003964:	0800399d 	.word	0x0800399d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396c:	3308      	adds	r3, #8
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f000 ff01 	bl	8004778 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800397c:	e00f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800397e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003982:	3328      	adds	r3, #40	@ 0x28
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f000 ffa8 	bl	80048dc <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f023 0107 	bic.w	r1, r3, #7
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b6:	4a68      	ldr	r2, [pc, #416]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f002 0320 	and.w	r3, r2, #32
 80039d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d055      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f2:	d033      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f8:	d82c      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fe:	d02f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d826      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a0a:	d02b      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003a0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a10:	d820      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a16:	d012      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a1c:	d81a      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d022      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a26:	d115      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fea1 	bl	8004778 <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a3c:	e015      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a42:	3328      	adds	r3, #40	@ 0x28
 8003a44:	2102      	movs	r1, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ff48 	bl	80048dc <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a52:	e00a      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a5a:	e006      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a60:	bf00      	nop
 8003a62:	e002      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a72:	4b39      	ldr	r3, [pc, #228]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a82:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aa8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d058      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003abe:	d033      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003ac0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ac4:	d82c      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	d02f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad0:	d826      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ad6:	d02b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003adc:	d820      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae2:	d012      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae8:	d81a      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d022      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af2:	d115      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af8:	3308      	adds	r3, #8
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fe3b 	bl	8004778 <RCCEx_PLL2_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0e:	3328      	adds	r3, #40	@ 0x28
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fee2 	bl	80048dc <RCCEx_PLL3_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b26:	e006      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003b28:	bf00      	nop
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003b2c:	bf00      	nop
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10e      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b4e:	4a02      	ldr	r2, [pc, #8]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d055      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b90:	d033      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003b92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b96:	d82c      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b9c:	d02f      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba2:	d826      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ba4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ba8:	d02b      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003baa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003bae:	d820      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bb4:	d012      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bba:	d81a      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d022      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fdd2 	bl	8004778 <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bda:	e015      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be0:	3328      	adds	r3, #40	@ 0x28
 8003be2:	2102      	movs	r1, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fe79 	bl	80048dc <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c10:	4ba0      	ldr	r3, [pc, #640]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c20:	4a9c      	ldr	r2, [pc, #624]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c22:	430b      	orrs	r3, r1
 8003c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f002 0308 	and.w	r3, r2, #8
 8003c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c46:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d01e      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fe38 	bl	80048dc <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003c78:	4b86      	ldr	r3, [pc, #536]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c88:	4a82      	ldr	r2, [pc, #520]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f002 0310 	and.w	r3, r2, #16
 8003c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ca4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d01e      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cba:	d10c      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc0:	3328      	adds	r3, #40	@ 0x28
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fe09 	bl	80048dc <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce6:	4a6b      	ldr	r2, [pc, #428]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cfe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d03e      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d14:	d022      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d1a:	d81b      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d24:	d00b      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003d26:	e015      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fd21 	bl	8004778 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d42:	3328      	adds	r3, #40	@ 0x28
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fdc8 	bl	80048dc <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d66:	4b4b      	ldr	r3, [pc, #300]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d76:	4a47      	ldr	r2, [pc, #284]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d92:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d94:	2300      	movs	r3, #0
 8003d96:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003daa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dae:	d01f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003db0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003db4:	d818      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003dbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dc0:	d007      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003dc2:	e011      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a32      	ldr	r2, [pc, #200]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dd0:	e00f      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd6:	3328      	adds	r3, #40	@ 0x28
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fd7e 	bl	80048dc <RCCEx_PLL3_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003de6:	e004      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfa:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0a:	4a22      	ldr	r2, [pc, #136]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003e26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e28:	2300      	movs	r3, #0
 8003e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e2c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e30:	460b      	mov	r3, r1
 8003e32:	4313      	orrs	r3, r2
 8003e34:	d034      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e44:	d007      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003e46:	e011      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e48:	4b12      	ldr	r3, [pc, #72]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	4a11      	ldr	r2, [pc, #68]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e54:	e00e      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc8a 	bl	8004778 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10d      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	4a02      	ldr	r2, [pc, #8]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003e92:	bf00      	nop
 8003e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eae:	2300      	movs	r3, #0
 8003eb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eb2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	d00c      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec0:	3328      	adds	r3, #40	@ 0x28
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fd09 	bl	80048dc <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ee8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efc:	d018      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f02:	d811      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f08:	d014      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f0e:	d80b      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d011      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f18:	d106      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1a:	4bb7      	ldr	r3, [pc, #732]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4ab6      	ldr	r2, [pc, #728]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f2e:	e004      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f42:	4bad      	ldr	r3, [pc, #692]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f50:	4aa9      	ldr	r2, [pc, #676]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f56:	e003      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f6e:	2300      	movs	r3, #0
 8003f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f7c:	4b9e      	ldr	r3, [pc, #632]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	4a9b      	ldr	r2, [pc, #620]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fac:	4b92      	ldr	r3, [pc, #584]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fba:	4a8f      	ldr	r2, [pc, #572]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fce:	2300      	movs	r3, #0
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fdc:	4b86      	ldr	r3, [pc, #536]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	4a85      	ldr	r2, [pc, #532]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fe6:	6113      	str	r3, [r2, #16]
 8003fe8:	4b83      	ldr	r3, [pc, #524]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fea:	6919      	ldr	r1, [r3, #16]
 8003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ff4:	4a80      	ldr	r2, [pc, #512]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004008:	2300      	movs	r3, #0
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800400c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004016:	4b78      	ldr	r3, [pc, #480]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004024:	4a74      	ldr	r2, [pc, #464]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004026:	430b      	orrs	r3, r1
 8004028:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004036:	633b      	str	r3, [r7, #48]	@ 0x30
 8004038:	2300      	movs	r3, #0
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
 800403c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004046:	4b6c      	ldr	r3, [pc, #432]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	4a68      	ldr	r2, [pc, #416]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	2100      	movs	r1, #0
 8004066:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d011      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	3308      	adds	r3, #8
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fb79 	bl	8004778 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800408c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	2100      	movs	r1, #0
 80040a6:	6239      	str	r1, [r7, #32]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040b2:	460b      	mov	r3, r1
 80040b4:	4313      	orrs	r3, r2
 80040b6:	d011      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040bc:	3308      	adds	r3, #8
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fb59 	bl	8004778 <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80040cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	2100      	movs	r1, #0
 80040e6:	61b9      	str	r1, [r7, #24]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d011      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fc:	3308      	adds	r3, #8
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fb39 	bl	8004778 <RCCEx_PLL2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800410c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	2100      	movs	r1, #0
 8004126:	6139      	str	r1, [r7, #16]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d011      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fbcb 	bl	80048dc <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800414c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	2100      	movs	r1, #0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d011      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417c:	3328      	adds	r3, #40	@ 0x28
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fbab 	bl	80048dc <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800418c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800419c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	2100      	movs	r1, #0
 80041a6:	6039      	str	r1, [r7, #0]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d011      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041bc:	3328      	adds	r3, #40	@ 0x28
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb8b 	bl	80048dc <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80041dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400

080041fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004200:	f7fe fdbe 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4904      	ldr	r1, [pc, #16]	@ (8004224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	58024400 	.word	0x58024400
 8004224:	0800926c 	.word	0x0800926c

08004228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	@ 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004230:	4ba1      	ldr	r3, [pc, #644]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800423a:	4b9f      	ldr	r3, [pc, #636]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	0b1b      	lsrs	r3, r3, #12
 8004240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004246:	4b9c      	ldr	r3, [pc, #624]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004252:	4b99      	ldr	r3, [pc, #612]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8111 	beq.w	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	f000 8083 	beq.w	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f200 80a1 	bhi.w	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d056      	beq.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004292:	e099      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004294:	4b88      	ldr	r3, [pc, #544]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02d      	beq.n	80042fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a0:	4b85      	ldr	r3, [pc, #532]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	4a84      	ldr	r2, [pc, #528]	@ (80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b7b      	ldr	r3, [pc, #492]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042fa:	e087      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b6a      	ldr	r3, [pc, #424]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800433e:	e065      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004382:	e043      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b48      	ldr	r3, [pc, #288]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e021      	b.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800440c:	4b2a      	ldr	r3, [pc, #168]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	0a5b      	lsrs	r3, r3, #9
 8004412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004426:	edd7 6a07 	vldr	s13, [r7, #28]
 800442a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004432:	ee17 2a90 	vmov	r2, s15
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800443a:	4b1f      	ldr	r3, [pc, #124]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004444:	ee07 3a90 	vmov	s15, r3
 8004448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004454:	edd7 6a07 	vldr	s13, [r7, #28]
 8004458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004460:	ee17 2a90 	vmov	r2, s15
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004468:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800447e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004482:	edd7 6a07 	vldr	s13, [r7, #28]
 8004486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800448a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448e:	ee17 2a90 	vmov	r2, s15
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004496:	e008      	b.n	80044aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
}
 80044aa:	bf00      	nop
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400
 80044bc:	03d09000 	.word	0x03d09000
 80044c0:	46000000 	.word	0x46000000
 80044c4:	4c742400 	.word	0x4c742400
 80044c8:	4a742400 	.word	0x4a742400
 80044cc:	4af42400 	.word	0x4af42400

080044d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	@ 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80044e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	0d1b      	lsrs	r3, r3, #20
 80044e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80044fa:	4b99      	ldr	r3, [pc, #612]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8111 	beq.w	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b02      	cmp	r3, #2
 8004522:	f000 8083 	beq.w	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f200 80a1 	bhi.w	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d056      	beq.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800453a:	e099      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800453c:	4b88      	ldr	r3, [pc, #544]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02d      	beq.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004548:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	4a84      	ldr	r2, [pc, #528]	@ (8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b7b      	ldr	r3, [pc, #492]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045a2:	e087      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800476c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e6:	e065      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b59      	ldr	r3, [pc, #356]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462a:	e043      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b48      	ldr	r3, [pc, #288]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800466e:	e021      	b.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b37      	ldr	r3, [pc, #220]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	0a5b      	lsrs	r3, r3, #9
 80046ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046da:	ee17 2a90 	vmov	r2, s15
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80046e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004708:	ee17 2a90 	vmov	r2, s15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004710:	4b13      	ldr	r3, [pc, #76]	@ (8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800472a:	edd7 6a07 	vldr	s13, [r7, #28]
 800472e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004736:	ee17 2a90 	vmov	r2, s15
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800473e:	e008      	b.n	8004752 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	3724      	adds	r7, #36	@ 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
 8004764:	03d09000 	.word	0x03d09000
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4af42400 	.word	0x4af42400

08004778 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004786:	4b53      	ldr	r3, [pc, #332]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d101      	bne.n	8004796 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e099      	b.n	80048ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004796:	4b4f      	ldr	r3, [pc, #316]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a4e      	ldr	r2, [pc, #312]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800479c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a2:	f7fc fcb3 	bl	800110c <HAL_GetTick>
 80047a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047a8:	e008      	b.n	80047bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047aa:	f7fc fcaf 	bl	800110c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e086      	b.n	80048ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047bc:	4b45      	ldr	r3, [pc, #276]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047c8:	4b42      	ldr	r3, [pc, #264]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	493f      	ldr	r1, [pc, #252]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	628b      	str	r3, [r1, #40]	@ 0x28
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	025b      	lsls	r3, r3, #9
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	3b01      	subs	r3, #1
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800480c:	4931      	ldr	r1, [pc, #196]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004812:	4b30      	ldr	r3, [pc, #192]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	492d      	ldr	r1, [pc, #180]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004824:	4b2b      	ldr	r3, [pc, #172]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	f023 0220 	bic.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4928      	ldr	r1, [pc, #160]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004836:	4b27      	ldr	r3, [pc, #156]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800483c:	f023 0310 	bic.w	r3, r3, #16
 8004840:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004842:	4b24      	ldr	r3, [pc, #144]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004846:	4b24      	ldr	r3, [pc, #144]	@ (80048d8 <RCCEx_PLL2_Config+0x160>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	69d2      	ldr	r2, [r2, #28]
 800484e:	00d2      	lsls	r2, r2, #3
 8004850:	4920      	ldr	r1, [pc, #128]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004856:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800485c:	f043 0310 	orr.w	r3, r3, #16
 8004860:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004868:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	4a19      	ldr	r2, [pc, #100]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800486e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004874:	e00f      	b.n	8004896 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800487c:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004886:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004888:	e005      	b.n	8004896 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800488a:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	4a11      	ldr	r2, [pc, #68]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004894:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004896:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a0e      	ldr	r2, [pc, #56]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 800489c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fc fc33 	bl	800110c <HAL_GetTick>
 80048a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048a8:	e008      	b.n	80048bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048aa:	f7fc fc2f 	bl	800110c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048bc:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <RCCEx_PLL2_Config+0x15c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	ffff0007 	.word	0xffff0007

080048dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ea:	4b53      	ldr	r3, [pc, #332]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d101      	bne.n	80048fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e099      	b.n	8004a2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004906:	f7fc fc01 	bl	800110c <HAL_GetTick>
 800490a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800490c:	e008      	b.n	8004920 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800490e:	f7fc fbfd 	bl	800110c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e086      	b.n	8004a2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004920:	4b45      	ldr	r3, [pc, #276]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800492c:	4b42      	ldr	r3, [pc, #264]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	493f      	ldr	r1, [pc, #252]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	3b01      	subs	r3, #1
 8004946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	3b01      	subs	r3, #1
 8004950:	025b      	lsls	r3, r3, #9
 8004952:	b29b      	uxth	r3, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	3b01      	subs	r3, #1
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004970:	4931      	ldr	r1, [pc, #196]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004976:	4b30      	ldr	r3, [pc, #192]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	492d      	ldr	r1, [pc, #180]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004988:	4b2b      	ldr	r3, [pc, #172]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	4928      	ldr	r1, [pc, #160]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800499a:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	4a26      	ldr	r2, [pc, #152]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049a6:	4b24      	ldr	r3, [pc, #144]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049aa:	4b24      	ldr	r3, [pc, #144]	@ (8004a3c <RCCEx_PLL3_Config+0x160>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	69d2      	ldr	r2, [r2, #28]
 80049b2:	00d2      	lsls	r2, r2, #3
 80049b4:	4920      	ldr	r1, [pc, #128]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	4a1e      	ldr	r2, [pc, #120]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049d8:	e00f      	b.n	80049fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049e0:	4b15      	ldr	r3, [pc, #84]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	4a14      	ldr	r2, [pc, #80]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049ec:	e005      	b.n	80049fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049ee:	4b12      	ldr	r3, [pc, #72]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fc fb81 	bl	800110c <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a0c:	e008      	b.n	8004a20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a0e:	f7fc fb7d 	bl	800110c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a20:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	ffff0007 	.word	0xffff0007

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e049      	b.n	8004ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f841 	bl	8004aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 f9f6 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d001      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e05e      	b.n	8004bda <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2b      	ldr	r2, [pc, #172]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02c      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b46:	d027      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	@ (8004bec <HAL_TIM_Base_Start_IT+0xe8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a26      	ldr	r2, [pc, #152]	@ (8004bf0 <HAL_TIM_Base_Start_IT+0xec>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xf0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a23      	ldr	r2, [pc, #140]	@ (8004bf8 <HAL_TIM_Base_Start_IT+0xf4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a21      	ldr	r2, [pc, #132]	@ (8004bfc <HAL_TIM_Base_Start_IT+0xf8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a20      	ldr	r2, [pc, #128]	@ (8004c00 <HAL_TIM_Base_Start_IT+0xfc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <HAL_TIM_Base_Start_IT+0x100>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x94>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	@ (8004c08 <HAL_TIM_Base_Start_IT+0x104>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d115      	bne.n	8004bc4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c0c <HAL_TIM_Base_Start_IT+0x108>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d015      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0xd2>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb0:	d011      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	e008      	b.n	8004bd6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e000      	b.n	8004bd8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40010400 	.word	0x40010400
 8004bfc:	40001800 	.word	0x40001800
 8004c00:	40014000 	.word	0x40014000
 8004c04:	4000e000 	.word	0x4000e000
 8004c08:	4000e400 	.word	0x4000e400
 8004c0c:	00010007 	.word	0x00010007

08004c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d020      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01b      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0202 	mvn.w	r2, #2
 8004c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8e9 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f8db 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8ec 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0204 	mvn.w	r2, #4
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f8c3 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f8b5 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8c6 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0208 	mvn.w	r2, #8
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f89d 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f88f 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8a0 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f877 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f869 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f87a 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0201 	mvn.w	r2, #1
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb ff50 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f91f 	bl	8004fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00c      	beq.n	8004dce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f917 	bl	8004ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f834 	bl	8004e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0220 	mvn.w	r2, #32
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f8df 	bl	8004fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a4a      	ldr	r2, [pc, #296]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a47      	ldr	r2, [pc, #284]	@ (8004fb0 <TIM_Base_SetConfig+0x140>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a46      	ldr	r2, [pc, #280]	@ (8004fb4 <TIM_Base_SetConfig+0x144>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a45      	ldr	r2, [pc, #276]	@ (8004fb8 <TIM_Base_SetConfig+0x148>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a44      	ldr	r2, [pc, #272]	@ (8004fbc <TIM_Base_SetConfig+0x14c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a39      	ldr	r2, [pc, #228]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d027      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed0:	d023      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a36      	ldr	r2, [pc, #216]	@ (8004fb0 <TIM_Base_SetConfig+0x140>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01f      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a35      	ldr	r2, [pc, #212]	@ (8004fb4 <TIM_Base_SetConfig+0x144>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01b      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a34      	ldr	r2, [pc, #208]	@ (8004fb8 <TIM_Base_SetConfig+0x148>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d017      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a33      	ldr	r2, [pc, #204]	@ (8004fbc <TIM_Base_SetConfig+0x14c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a32      	ldr	r2, [pc, #200]	@ (8004fc0 <TIM_Base_SetConfig+0x150>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a31      	ldr	r2, [pc, #196]	@ (8004fc4 <TIM_Base_SetConfig+0x154>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a30      	ldr	r2, [pc, #192]	@ (8004fc8 <TIM_Base_SetConfig+0x158>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004fcc <TIM_Base_SetConfig+0x15c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_Base_SetConfig+0xaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd0 <TIM_Base_SetConfig+0x160>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a16      	ldr	r2, [pc, #88]	@ (8004fac <TIM_Base_SetConfig+0x13c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00f      	beq.n	8004f78 <TIM_Base_SetConfig+0x108>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <TIM_Base_SetConfig+0x14c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <TIM_Base_SetConfig+0x108>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a17      	ldr	r2, [pc, #92]	@ (8004fc0 <TIM_Base_SetConfig+0x150>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d007      	beq.n	8004f78 <TIM_Base_SetConfig+0x108>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a16      	ldr	r2, [pc, #88]	@ (8004fc4 <TIM_Base_SetConfig+0x154>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0x108>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a15      	ldr	r2, [pc, #84]	@ (8004fc8 <TIM_Base_SetConfig+0x158>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d103      	bne.n	8004f80 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40014400 	.word	0x40014400
 8004fc8:	40014800 	.word	0x40014800
 8004fcc:	4000e000 	.word	0x4000e000
 8004fd0:	4000e400 	.word	0x4000e400

08004fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e042      	b.n	80050a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fb ff7d 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	@ 0x24
 800503e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 ff22 	bl	8005ea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8b3 	bl	80051cc <UART_SetConfig>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e01b      	b.n	80050a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800507e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800508e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 ffa1 	bl	8005fe8 <UART_CheckIdleState>
 80050a6:	4603      	mov	r3, r0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d17b      	bne.n	80051c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_UART_Transmit+0x26>
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e074      	b.n	80051c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2221      	movs	r2, #33	@ 0x21
 80050e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ea:	f7fc f80f 	bl	800110c <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005108:	d108      	bne.n	800511c <HAL_UART_Transmit+0x6c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e003      	b.n	8005124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005124:	e030      	b.n	8005188 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f001 f803 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e03d      	b.n	80051c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	3302      	adds	r3, #2
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e007      	b.n	8005176 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3301      	adds	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1c8      	bne.n	8005126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	2140      	movs	r1, #64	@ 0x40
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 ffcc 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e006      	b.n	80051c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d0:	b092      	sub	sp, #72	@ 0x48
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4bbe      	ldr	r3, [pc, #760]	@ (80054f4 <UART_SetConfig+0x328>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005204:	430b      	orrs	r3, r1
 8005206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4ab3      	ldr	r2, [pc, #716]	@ (80054f8 <UART_SetConfig+0x32c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005234:	4313      	orrs	r3, r2
 8005236:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	4baf      	ldr	r3, [pc, #700]	@ (80054fc <UART_SetConfig+0x330>)
 8005240:	4013      	ands	r3, r2
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005248:	430b      	orrs	r3, r1
 800524a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	f023 010f 	bic.w	r1, r3, #15
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4aa6      	ldr	r2, [pc, #664]	@ (8005500 <UART_SetConfig+0x334>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d177      	bne.n	800535c <UART_SetConfig+0x190>
 800526c:	4ba5      	ldr	r3, [pc, #660]	@ (8005504 <UART_SetConfig+0x338>)
 800526e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005274:	2b28      	cmp	r3, #40	@ 0x28
 8005276:	d86d      	bhi.n	8005354 <UART_SetConfig+0x188>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0xb4>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005325 	.word	0x08005325
 8005284:	08005355 	.word	0x08005355
 8005288:	08005355 	.word	0x08005355
 800528c:	08005355 	.word	0x08005355
 8005290:	08005355 	.word	0x08005355
 8005294:	08005355 	.word	0x08005355
 8005298:	08005355 	.word	0x08005355
 800529c:	08005355 	.word	0x08005355
 80052a0:	0800532d 	.word	0x0800532d
 80052a4:	08005355 	.word	0x08005355
 80052a8:	08005355 	.word	0x08005355
 80052ac:	08005355 	.word	0x08005355
 80052b0:	08005355 	.word	0x08005355
 80052b4:	08005355 	.word	0x08005355
 80052b8:	08005355 	.word	0x08005355
 80052bc:	08005355 	.word	0x08005355
 80052c0:	08005335 	.word	0x08005335
 80052c4:	08005355 	.word	0x08005355
 80052c8:	08005355 	.word	0x08005355
 80052cc:	08005355 	.word	0x08005355
 80052d0:	08005355 	.word	0x08005355
 80052d4:	08005355 	.word	0x08005355
 80052d8:	08005355 	.word	0x08005355
 80052dc:	08005355 	.word	0x08005355
 80052e0:	0800533d 	.word	0x0800533d
 80052e4:	08005355 	.word	0x08005355
 80052e8:	08005355 	.word	0x08005355
 80052ec:	08005355 	.word	0x08005355
 80052f0:	08005355 	.word	0x08005355
 80052f4:	08005355 	.word	0x08005355
 80052f8:	08005355 	.word	0x08005355
 80052fc:	08005355 	.word	0x08005355
 8005300:	08005345 	.word	0x08005345
 8005304:	08005355 	.word	0x08005355
 8005308:	08005355 	.word	0x08005355
 800530c:	08005355 	.word	0x08005355
 8005310:	08005355 	.word	0x08005355
 8005314:	08005355 	.word	0x08005355
 8005318:	08005355 	.word	0x08005355
 800531c:	08005355 	.word	0x08005355
 8005320:	0800534d 	.word	0x0800534d
 8005324:	2301      	movs	r3, #1
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e326      	b.n	800597a <UART_SetConfig+0x7ae>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e322      	b.n	800597a <UART_SetConfig+0x7ae>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e31e      	b.n	800597a <UART_SetConfig+0x7ae>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e31a      	b.n	800597a <UART_SetConfig+0x7ae>
 8005344:	2320      	movs	r3, #32
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e316      	b.n	800597a <UART_SetConfig+0x7ae>
 800534c:	2340      	movs	r3, #64	@ 0x40
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e312      	b.n	800597a <UART_SetConfig+0x7ae>
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535a:	e30e      	b.n	800597a <UART_SetConfig+0x7ae>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a69      	ldr	r2, [pc, #420]	@ (8005508 <UART_SetConfig+0x33c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d130      	bne.n	80053c8 <UART_SetConfig+0x1fc>
 8005366:	4b67      	ldr	r3, [pc, #412]	@ (8005504 <UART_SetConfig+0x338>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b05      	cmp	r3, #5
 8005370:	d826      	bhi.n	80053c0 <UART_SetConfig+0x1f4>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x1ac>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005391 	.word	0x08005391
 800537c:	08005399 	.word	0x08005399
 8005380:	080053a1 	.word	0x080053a1
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e2f0      	b.n	800597a <UART_SetConfig+0x7ae>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e2ec      	b.n	800597a <UART_SetConfig+0x7ae>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e2e8      	b.n	800597a <UART_SetConfig+0x7ae>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e2e4      	b.n	800597a <UART_SetConfig+0x7ae>
 80053b0:	2320      	movs	r3, #32
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e2e0      	b.n	800597a <UART_SetConfig+0x7ae>
 80053b8:	2340      	movs	r3, #64	@ 0x40
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e2dc      	b.n	800597a <UART_SetConfig+0x7ae>
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e2d8      	b.n	800597a <UART_SetConfig+0x7ae>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a4f      	ldr	r2, [pc, #316]	@ (800550c <UART_SetConfig+0x340>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d130      	bne.n	8005434 <UART_SetConfig+0x268>
 80053d2:	4b4c      	ldr	r3, [pc, #304]	@ (8005504 <UART_SetConfig+0x338>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d826      	bhi.n	800542c <UART_SetConfig+0x260>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0x218>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e2ba      	b.n	800597a <UART_SetConfig+0x7ae>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e2b6      	b.n	800597a <UART_SetConfig+0x7ae>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e2b2      	b.n	800597a <UART_SetConfig+0x7ae>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e2ae      	b.n	800597a <UART_SetConfig+0x7ae>
 800541c:	2320      	movs	r3, #32
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e2aa      	b.n	800597a <UART_SetConfig+0x7ae>
 8005424:	2340      	movs	r3, #64	@ 0x40
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e2a6      	b.n	800597a <UART_SetConfig+0x7ae>
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e2a2      	b.n	800597a <UART_SetConfig+0x7ae>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a35      	ldr	r2, [pc, #212]	@ (8005510 <UART_SetConfig+0x344>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d130      	bne.n	80054a0 <UART_SetConfig+0x2d4>
 800543e:	4b31      	ldr	r3, [pc, #196]	@ (8005504 <UART_SetConfig+0x338>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b05      	cmp	r3, #5
 8005448:	d826      	bhi.n	8005498 <UART_SetConfig+0x2cc>
 800544a:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <UART_SetConfig+0x284>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005469 	.word	0x08005469
 8005454:	08005471 	.word	0x08005471
 8005458:	08005479 	.word	0x08005479
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e284      	b.n	800597a <UART_SetConfig+0x7ae>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e280      	b.n	800597a <UART_SetConfig+0x7ae>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e27c      	b.n	800597a <UART_SetConfig+0x7ae>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e278      	b.n	800597a <UART_SetConfig+0x7ae>
 8005488:	2320      	movs	r3, #32
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e274      	b.n	800597a <UART_SetConfig+0x7ae>
 8005490:	2340      	movs	r3, #64	@ 0x40
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e270      	b.n	800597a <UART_SetConfig+0x7ae>
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549e:	e26c      	b.n	800597a <UART_SetConfig+0x7ae>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <UART_SetConfig+0x348>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d142      	bne.n	8005530 <UART_SetConfig+0x364>
 80054aa:	4b16      	ldr	r3, [pc, #88]	@ (8005504 <UART_SetConfig+0x338>)
 80054ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d838      	bhi.n	8005528 <UART_SetConfig+0x35c>
 80054b6:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <UART_SetConfig+0x2f0>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	080054e5 	.word	0x080054e5
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005521 	.word	0x08005521
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e24e      	b.n	800597a <UART_SetConfig+0x7ae>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e24a      	b.n	800597a <UART_SetConfig+0x7ae>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e246      	b.n	800597a <UART_SetConfig+0x7ae>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e242      	b.n	800597a <UART_SetConfig+0x7ae>
 80054f4:	cfff69f3 	.word	0xcfff69f3
 80054f8:	58000c00 	.word	0x58000c00
 80054fc:	11fff4ff 	.word	0x11fff4ff
 8005500:	40011000 	.word	0x40011000
 8005504:	58024400 	.word	0x58024400
 8005508:	40004400 	.word	0x40004400
 800550c:	40004800 	.word	0x40004800
 8005510:	40004c00 	.word	0x40004c00
 8005514:	40005000 	.word	0x40005000
 8005518:	2320      	movs	r3, #32
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e22c      	b.n	800597a <UART_SetConfig+0x7ae>
 8005520:	2340      	movs	r3, #64	@ 0x40
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e228      	b.n	800597a <UART_SetConfig+0x7ae>
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e224      	b.n	800597a <UART_SetConfig+0x7ae>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4ab1      	ldr	r2, [pc, #708]	@ (80057fc <UART_SetConfig+0x630>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d176      	bne.n	8005628 <UART_SetConfig+0x45c>
 800553a:	4bb1      	ldr	r3, [pc, #708]	@ (8005800 <UART_SetConfig+0x634>)
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005542:	2b28      	cmp	r3, #40	@ 0x28
 8005544:	d86c      	bhi.n	8005620 <UART_SetConfig+0x454>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <UART_SetConfig+0x380>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	080055f1 	.word	0x080055f1
 8005550:	08005621 	.word	0x08005621
 8005554:	08005621 	.word	0x08005621
 8005558:	08005621 	.word	0x08005621
 800555c:	08005621 	.word	0x08005621
 8005560:	08005621 	.word	0x08005621
 8005564:	08005621 	.word	0x08005621
 8005568:	08005621 	.word	0x08005621
 800556c:	080055f9 	.word	0x080055f9
 8005570:	08005621 	.word	0x08005621
 8005574:	08005621 	.word	0x08005621
 8005578:	08005621 	.word	0x08005621
 800557c:	08005621 	.word	0x08005621
 8005580:	08005621 	.word	0x08005621
 8005584:	08005621 	.word	0x08005621
 8005588:	08005621 	.word	0x08005621
 800558c:	08005601 	.word	0x08005601
 8005590:	08005621 	.word	0x08005621
 8005594:	08005621 	.word	0x08005621
 8005598:	08005621 	.word	0x08005621
 800559c:	08005621 	.word	0x08005621
 80055a0:	08005621 	.word	0x08005621
 80055a4:	08005621 	.word	0x08005621
 80055a8:	08005621 	.word	0x08005621
 80055ac:	08005609 	.word	0x08005609
 80055b0:	08005621 	.word	0x08005621
 80055b4:	08005621 	.word	0x08005621
 80055b8:	08005621 	.word	0x08005621
 80055bc:	08005621 	.word	0x08005621
 80055c0:	08005621 	.word	0x08005621
 80055c4:	08005621 	.word	0x08005621
 80055c8:	08005621 	.word	0x08005621
 80055cc:	08005611 	.word	0x08005611
 80055d0:	08005621 	.word	0x08005621
 80055d4:	08005621 	.word	0x08005621
 80055d8:	08005621 	.word	0x08005621
 80055dc:	08005621 	.word	0x08005621
 80055e0:	08005621 	.word	0x08005621
 80055e4:	08005621 	.word	0x08005621
 80055e8:	08005621 	.word	0x08005621
 80055ec:	08005619 	.word	0x08005619
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e1c0      	b.n	800597a <UART_SetConfig+0x7ae>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e1bc      	b.n	800597a <UART_SetConfig+0x7ae>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e1b8      	b.n	800597a <UART_SetConfig+0x7ae>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e1b4      	b.n	800597a <UART_SetConfig+0x7ae>
 8005610:	2320      	movs	r3, #32
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e1b0      	b.n	800597a <UART_SetConfig+0x7ae>
 8005618:	2340      	movs	r3, #64	@ 0x40
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e1ac      	b.n	800597a <UART_SetConfig+0x7ae>
 8005620:	2380      	movs	r3, #128	@ 0x80
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e1a8      	b.n	800597a <UART_SetConfig+0x7ae>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a75      	ldr	r2, [pc, #468]	@ (8005804 <UART_SetConfig+0x638>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d130      	bne.n	8005694 <UART_SetConfig+0x4c8>
 8005632:	4b73      	ldr	r3, [pc, #460]	@ (8005800 <UART_SetConfig+0x634>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	2b05      	cmp	r3, #5
 800563c:	d826      	bhi.n	800568c <UART_SetConfig+0x4c0>
 800563e:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <UART_SetConfig+0x478>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	0800565d 	.word	0x0800565d
 8005648:	08005665 	.word	0x08005665
 800564c:	0800566d 	.word	0x0800566d
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e18a      	b.n	800597a <UART_SetConfig+0x7ae>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e186      	b.n	800597a <UART_SetConfig+0x7ae>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e182      	b.n	800597a <UART_SetConfig+0x7ae>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e17e      	b.n	800597a <UART_SetConfig+0x7ae>
 800567c:	2320      	movs	r3, #32
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e17a      	b.n	800597a <UART_SetConfig+0x7ae>
 8005684:	2340      	movs	r3, #64	@ 0x40
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e176      	b.n	800597a <UART_SetConfig+0x7ae>
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e172      	b.n	800597a <UART_SetConfig+0x7ae>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5b      	ldr	r2, [pc, #364]	@ (8005808 <UART_SetConfig+0x63c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d130      	bne.n	8005700 <UART_SetConfig+0x534>
 800569e:	4b58      	ldr	r3, [pc, #352]	@ (8005800 <UART_SetConfig+0x634>)
 80056a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d826      	bhi.n	80056f8 <UART_SetConfig+0x52c>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x4e4>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	080056d9 	.word	0x080056d9
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e154      	b.n	800597a <UART_SetConfig+0x7ae>
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e150      	b.n	800597a <UART_SetConfig+0x7ae>
 80056d8:	2308      	movs	r3, #8
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e14c      	b.n	800597a <UART_SetConfig+0x7ae>
 80056e0:	2310      	movs	r3, #16
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e148      	b.n	800597a <UART_SetConfig+0x7ae>
 80056e8:	2320      	movs	r3, #32
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e144      	b.n	800597a <UART_SetConfig+0x7ae>
 80056f0:	2340      	movs	r3, #64	@ 0x40
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e140      	b.n	800597a <UART_SetConfig+0x7ae>
 80056f8:	2380      	movs	r3, #128	@ 0x80
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e13c      	b.n	800597a <UART_SetConfig+0x7ae>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a41      	ldr	r2, [pc, #260]	@ (800580c <UART_SetConfig+0x640>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f040 8082 	bne.w	8005810 <UART_SetConfig+0x644>
 800570c:	4b3c      	ldr	r3, [pc, #240]	@ (8005800 <UART_SetConfig+0x634>)
 800570e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005710:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005714:	2b28      	cmp	r3, #40	@ 0x28
 8005716:	d86d      	bhi.n	80057f4 <UART_SetConfig+0x628>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <UART_SetConfig+0x554>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	080057c5 	.word	0x080057c5
 8005724:	080057f5 	.word	0x080057f5
 8005728:	080057f5 	.word	0x080057f5
 800572c:	080057f5 	.word	0x080057f5
 8005730:	080057f5 	.word	0x080057f5
 8005734:	080057f5 	.word	0x080057f5
 8005738:	080057f5 	.word	0x080057f5
 800573c:	080057f5 	.word	0x080057f5
 8005740:	080057cd 	.word	0x080057cd
 8005744:	080057f5 	.word	0x080057f5
 8005748:	080057f5 	.word	0x080057f5
 800574c:	080057f5 	.word	0x080057f5
 8005750:	080057f5 	.word	0x080057f5
 8005754:	080057f5 	.word	0x080057f5
 8005758:	080057f5 	.word	0x080057f5
 800575c:	080057f5 	.word	0x080057f5
 8005760:	080057d5 	.word	0x080057d5
 8005764:	080057f5 	.word	0x080057f5
 8005768:	080057f5 	.word	0x080057f5
 800576c:	080057f5 	.word	0x080057f5
 8005770:	080057f5 	.word	0x080057f5
 8005774:	080057f5 	.word	0x080057f5
 8005778:	080057f5 	.word	0x080057f5
 800577c:	080057f5 	.word	0x080057f5
 8005780:	080057dd 	.word	0x080057dd
 8005784:	080057f5 	.word	0x080057f5
 8005788:	080057f5 	.word	0x080057f5
 800578c:	080057f5 	.word	0x080057f5
 8005790:	080057f5 	.word	0x080057f5
 8005794:	080057f5 	.word	0x080057f5
 8005798:	080057f5 	.word	0x080057f5
 800579c:	080057f5 	.word	0x080057f5
 80057a0:	080057e5 	.word	0x080057e5
 80057a4:	080057f5 	.word	0x080057f5
 80057a8:	080057f5 	.word	0x080057f5
 80057ac:	080057f5 	.word	0x080057f5
 80057b0:	080057f5 	.word	0x080057f5
 80057b4:	080057f5 	.word	0x080057f5
 80057b8:	080057f5 	.word	0x080057f5
 80057bc:	080057f5 	.word	0x080057f5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e0d6      	b.n	800597a <UART_SetConfig+0x7ae>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e0d2      	b.n	800597a <UART_SetConfig+0x7ae>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e0ce      	b.n	800597a <UART_SetConfig+0x7ae>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e0ca      	b.n	800597a <UART_SetConfig+0x7ae>
 80057e4:	2320      	movs	r3, #32
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ea:	e0c6      	b.n	800597a <UART_SetConfig+0x7ae>
 80057ec:	2340      	movs	r3, #64	@ 0x40
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e0c2      	b.n	800597a <UART_SetConfig+0x7ae>
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fa:	e0be      	b.n	800597a <UART_SetConfig+0x7ae>
 80057fc:	40011400 	.word	0x40011400
 8005800:	58024400 	.word	0x58024400
 8005804:	40007800 	.word	0x40007800
 8005808:	40007c00 	.word	0x40007c00
 800580c:	40011800 	.word	0x40011800
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4aad      	ldr	r2, [pc, #692]	@ (8005acc <UART_SetConfig+0x900>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d176      	bne.n	8005908 <UART_SetConfig+0x73c>
 800581a:	4bad      	ldr	r3, [pc, #692]	@ (8005ad0 <UART_SetConfig+0x904>)
 800581c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005822:	2b28      	cmp	r3, #40	@ 0x28
 8005824:	d86c      	bhi.n	8005900 <UART_SetConfig+0x734>
 8005826:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <UART_SetConfig+0x660>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	080058d1 	.word	0x080058d1
 8005830:	08005901 	.word	0x08005901
 8005834:	08005901 	.word	0x08005901
 8005838:	08005901 	.word	0x08005901
 800583c:	08005901 	.word	0x08005901
 8005840:	08005901 	.word	0x08005901
 8005844:	08005901 	.word	0x08005901
 8005848:	08005901 	.word	0x08005901
 800584c:	080058d9 	.word	0x080058d9
 8005850:	08005901 	.word	0x08005901
 8005854:	08005901 	.word	0x08005901
 8005858:	08005901 	.word	0x08005901
 800585c:	08005901 	.word	0x08005901
 8005860:	08005901 	.word	0x08005901
 8005864:	08005901 	.word	0x08005901
 8005868:	08005901 	.word	0x08005901
 800586c:	080058e1 	.word	0x080058e1
 8005870:	08005901 	.word	0x08005901
 8005874:	08005901 	.word	0x08005901
 8005878:	08005901 	.word	0x08005901
 800587c:	08005901 	.word	0x08005901
 8005880:	08005901 	.word	0x08005901
 8005884:	08005901 	.word	0x08005901
 8005888:	08005901 	.word	0x08005901
 800588c:	080058e9 	.word	0x080058e9
 8005890:	08005901 	.word	0x08005901
 8005894:	08005901 	.word	0x08005901
 8005898:	08005901 	.word	0x08005901
 800589c:	08005901 	.word	0x08005901
 80058a0:	08005901 	.word	0x08005901
 80058a4:	08005901 	.word	0x08005901
 80058a8:	08005901 	.word	0x08005901
 80058ac:	080058f1 	.word	0x080058f1
 80058b0:	08005901 	.word	0x08005901
 80058b4:	08005901 	.word	0x08005901
 80058b8:	08005901 	.word	0x08005901
 80058bc:	08005901 	.word	0x08005901
 80058c0:	08005901 	.word	0x08005901
 80058c4:	08005901 	.word	0x08005901
 80058c8:	08005901 	.word	0x08005901
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e050      	b.n	800597a <UART_SetConfig+0x7ae>
 80058d8:	2304      	movs	r3, #4
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e04c      	b.n	800597a <UART_SetConfig+0x7ae>
 80058e0:	2308      	movs	r3, #8
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e048      	b.n	800597a <UART_SetConfig+0x7ae>
 80058e8:	2310      	movs	r3, #16
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e044      	b.n	800597a <UART_SetConfig+0x7ae>
 80058f0:	2320      	movs	r3, #32
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e040      	b.n	800597a <UART_SetConfig+0x7ae>
 80058f8:	2340      	movs	r3, #64	@ 0x40
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e03c      	b.n	800597a <UART_SetConfig+0x7ae>
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e038      	b.n	800597a <UART_SetConfig+0x7ae>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a71      	ldr	r2, [pc, #452]	@ (8005ad4 <UART_SetConfig+0x908>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d130      	bne.n	8005974 <UART_SetConfig+0x7a8>
 8005912:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad0 <UART_SetConfig+0x904>)
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	2b05      	cmp	r3, #5
 800591c:	d826      	bhi.n	800596c <UART_SetConfig+0x7a0>
 800591e:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0x758>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	0800593d 	.word	0x0800593d
 8005928:	08005945 	.word	0x08005945
 800592c:	0800594d 	.word	0x0800594d
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005965 	.word	0x08005965
 800593c:	2302      	movs	r3, #2
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e01a      	b.n	800597a <UART_SetConfig+0x7ae>
 8005944:	2304      	movs	r3, #4
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e016      	b.n	800597a <UART_SetConfig+0x7ae>
 800594c:	2308      	movs	r3, #8
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e012      	b.n	800597a <UART_SetConfig+0x7ae>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e00e      	b.n	800597a <UART_SetConfig+0x7ae>
 800595c:	2320      	movs	r3, #32
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e00a      	b.n	800597a <UART_SetConfig+0x7ae>
 8005964:	2340      	movs	r3, #64	@ 0x40
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e006      	b.n	800597a <UART_SetConfig+0x7ae>
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e002      	b.n	800597a <UART_SetConfig+0x7ae>
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a55      	ldr	r2, [pc, #340]	@ (8005ad4 <UART_SetConfig+0x908>)
 8005980:	4293      	cmp	r3, r2
 8005982:	f040 80f8 	bne.w	8005b76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005986:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800598a:	2b20      	cmp	r3, #32
 800598c:	dc46      	bgt.n	8005a1c <UART_SetConfig+0x850>
 800598e:	2b02      	cmp	r3, #2
 8005990:	db75      	blt.n	8005a7e <UART_SetConfig+0x8b2>
 8005992:	3b02      	subs	r3, #2
 8005994:	2b1e      	cmp	r3, #30
 8005996:	d872      	bhi.n	8005a7e <UART_SetConfig+0x8b2>
 8005998:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <UART_SetConfig+0x7d4>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	08005a23 	.word	0x08005a23
 80059a4:	08005a7f 	.word	0x08005a7f
 80059a8:	08005a2b 	.word	0x08005a2b
 80059ac:	08005a7f 	.word	0x08005a7f
 80059b0:	08005a7f 	.word	0x08005a7f
 80059b4:	08005a7f 	.word	0x08005a7f
 80059b8:	08005a3b 	.word	0x08005a3b
 80059bc:	08005a7f 	.word	0x08005a7f
 80059c0:	08005a7f 	.word	0x08005a7f
 80059c4:	08005a7f 	.word	0x08005a7f
 80059c8:	08005a7f 	.word	0x08005a7f
 80059cc:	08005a7f 	.word	0x08005a7f
 80059d0:	08005a7f 	.word	0x08005a7f
 80059d4:	08005a7f 	.word	0x08005a7f
 80059d8:	08005a4b 	.word	0x08005a4b
 80059dc:	08005a7f 	.word	0x08005a7f
 80059e0:	08005a7f 	.word	0x08005a7f
 80059e4:	08005a7f 	.word	0x08005a7f
 80059e8:	08005a7f 	.word	0x08005a7f
 80059ec:	08005a7f 	.word	0x08005a7f
 80059f0:	08005a7f 	.word	0x08005a7f
 80059f4:	08005a7f 	.word	0x08005a7f
 80059f8:	08005a7f 	.word	0x08005a7f
 80059fc:	08005a7f 	.word	0x08005a7f
 8005a00:	08005a7f 	.word	0x08005a7f
 8005a04:	08005a7f 	.word	0x08005a7f
 8005a08:	08005a7f 	.word	0x08005a7f
 8005a0c:	08005a7f 	.word	0x08005a7f
 8005a10:	08005a7f 	.word	0x08005a7f
 8005a14:	08005a7f 	.word	0x08005a7f
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	d02a      	beq.n	8005a76 <UART_SetConfig+0x8aa>
 8005a20:	e02d      	b.n	8005a7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a22:	f7fe fbeb 	bl	80041fc <HAL_RCCEx_GetD3PCLK1Freq>
 8005a26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a28:	e02f      	b.n	8005a8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fbfa 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a38:	e027      	b.n	8005a8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a3a:	f107 0318 	add.w	r3, r7, #24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fd46 	bl	80044d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a48:	e01f      	b.n	8005a8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a4a:	4b21      	ldr	r3, [pc, #132]	@ (8005ad0 <UART_SetConfig+0x904>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a56:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad0 <UART_SetConfig+0x904>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	08db      	lsrs	r3, r3, #3
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <UART_SetConfig+0x90c>)
 8005a62:	fa22 f303 	lsr.w	r3, r2, r3
 8005a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a68:	e00f      	b.n	8005a8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad8 <UART_SetConfig+0x90c>)
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a6e:	e00c      	b.n	8005a8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a70:	4b1a      	ldr	r3, [pc, #104]	@ (8005adc <UART_SetConfig+0x910>)
 8005a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a74:	e009      	b.n	8005a8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a7c:	e005      	b.n	8005a8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 81ee 	beq.w	8005e6e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	4a12      	ldr	r2, [pc, #72]	@ (8005ae0 <UART_SetConfig+0x914>)
 8005a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	4413      	add	r3, r2
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d305      	bcc.n	8005ac2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d910      	bls.n	8005ae4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ac8:	e1d1      	b.n	8005e6e <UART_SetConfig+0xca2>
 8005aca:	bf00      	nop
 8005acc:	40011c00 	.word	0x40011c00
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	58000c00 	.word	0x58000c00
 8005ad8:	03d09000 	.word	0x03d09000
 8005adc:	003d0900 	.word	0x003d0900
 8005ae0:	0800927c 	.word	0x0800927c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	60fa      	str	r2, [r7, #12]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	4ac0      	ldr	r2, [pc, #768]	@ (8005df4 <UART_SetConfig+0xc28>)
 8005af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2200      	movs	r2, #0
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b06:	f7fa fc0b 	bl	8000320 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	020b      	lsls	r3, r1, #8
 8005b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b20:	0202      	lsls	r2, r0, #8
 8005b22:	6979      	ldr	r1, [r7, #20]
 8005b24:	6849      	ldr	r1, [r1, #4]
 8005b26:	0849      	lsrs	r1, r1, #1
 8005b28:	2000      	movs	r0, #0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	eb12 0804 	adds.w	r8, r2, r4
 8005b32:	eb43 0905 	adc.w	r9, r3, r5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	469a      	mov	sl, r3
 8005b3e:	4693      	mov	fp, r2
 8005b40:	4652      	mov	r2, sl
 8005b42:	465b      	mov	r3, fp
 8005b44:	4640      	mov	r0, r8
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fa fbea 	bl	8000320 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4613      	mov	r3, r2
 8005b52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b5a:	d308      	bcc.n	8005b6e <UART_SetConfig+0x9a2>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b62:	d204      	bcs.n	8005b6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	e17f      	b.n	8005e6e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b74:	e17b      	b.n	8005e6e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7e:	f040 80bd 	bne.w	8005cfc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005b82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	dc48      	bgt.n	8005c1c <UART_SetConfig+0xa50>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	db7b      	blt.n	8005c86 <UART_SetConfig+0xaba>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d879      	bhi.n	8005c86 <UART_SetConfig+0xaba>
 8005b92:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <UART_SetConfig+0x9cc>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005c23 	.word	0x08005c23
 8005b9c:	08005c2b 	.word	0x08005c2b
 8005ba0:	08005c87 	.word	0x08005c87
 8005ba4:	08005c87 	.word	0x08005c87
 8005ba8:	08005c33 	.word	0x08005c33
 8005bac:	08005c87 	.word	0x08005c87
 8005bb0:	08005c87 	.word	0x08005c87
 8005bb4:	08005c87 	.word	0x08005c87
 8005bb8:	08005c43 	.word	0x08005c43
 8005bbc:	08005c87 	.word	0x08005c87
 8005bc0:	08005c87 	.word	0x08005c87
 8005bc4:	08005c87 	.word	0x08005c87
 8005bc8:	08005c87 	.word	0x08005c87
 8005bcc:	08005c87 	.word	0x08005c87
 8005bd0:	08005c87 	.word	0x08005c87
 8005bd4:	08005c87 	.word	0x08005c87
 8005bd8:	08005c53 	.word	0x08005c53
 8005bdc:	08005c87 	.word	0x08005c87
 8005be0:	08005c87 	.word	0x08005c87
 8005be4:	08005c87 	.word	0x08005c87
 8005be8:	08005c87 	.word	0x08005c87
 8005bec:	08005c87 	.word	0x08005c87
 8005bf0:	08005c87 	.word	0x08005c87
 8005bf4:	08005c87 	.word	0x08005c87
 8005bf8:	08005c87 	.word	0x08005c87
 8005bfc:	08005c87 	.word	0x08005c87
 8005c00:	08005c87 	.word	0x08005c87
 8005c04:	08005c87 	.word	0x08005c87
 8005c08:	08005c87 	.word	0x08005c87
 8005c0c:	08005c87 	.word	0x08005c87
 8005c10:	08005c87 	.word	0x08005c87
 8005c14:	08005c87 	.word	0x08005c87
 8005c18:	08005c79 	.word	0x08005c79
 8005c1c:	2b40      	cmp	r3, #64	@ 0x40
 8005c1e:	d02e      	beq.n	8005c7e <UART_SetConfig+0xab2>
 8005c20:	e031      	b.n	8005c86 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c22:	f7fd f8dd 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8005c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c28:	e033      	b.n	8005c92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c2a:	f7fd f8ef 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8005c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c30:	e02f      	b.n	8005c92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe faf6 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c40:	e027      	b.n	8005c92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c42:	f107 0318 	add.w	r3, r7, #24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fc42 	bl	80044d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c50:	e01f      	b.n	8005c92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c52:	4b69      	ldr	r3, [pc, #420]	@ (8005df8 <UART_SetConfig+0xc2c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c5e:	4b66      	ldr	r3, [pc, #408]	@ (8005df8 <UART_SetConfig+0xc2c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	08db      	lsrs	r3, r3, #3
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	4a64      	ldr	r2, [pc, #400]	@ (8005dfc <UART_SetConfig+0xc30>)
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c70:	e00f      	b.n	8005c92 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005c72:	4b62      	ldr	r3, [pc, #392]	@ (8005dfc <UART_SetConfig+0xc30>)
 8005c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c76:	e00c      	b.n	8005c92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c78:	4b61      	ldr	r3, [pc, #388]	@ (8005e00 <UART_SetConfig+0xc34>)
 8005c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c7c:	e009      	b.n	8005c92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c84:	e005      	b.n	8005c92 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80ea 	beq.w	8005e6e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	4a55      	ldr	r2, [pc, #340]	@ (8005df4 <UART_SetConfig+0xc28>)
 8005ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cac:	005a      	lsls	r2, r3, #1
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	441a      	add	r2, r3
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	2b0f      	cmp	r3, #15
 8005cc4:	d916      	bls.n	8005cf4 <UART_SetConfig+0xb28>
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ccc:	d212      	bcs.n	8005cf4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f023 030f 	bic.w	r3, r3, #15
 8005cd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	e0bc      	b.n	8005e6e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cfa:	e0b8      	b.n	8005e6e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cfc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	dc4b      	bgt.n	8005d9c <UART_SetConfig+0xbd0>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f2c0 8087 	blt.w	8005e18 <UART_SetConfig+0xc4c>
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	f200 8084 	bhi.w	8005e18 <UART_SetConfig+0xc4c>
 8005d10:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <UART_SetConfig+0xb4c>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005da3 	.word	0x08005da3
 8005d1c:	08005dab 	.word	0x08005dab
 8005d20:	08005e19 	.word	0x08005e19
 8005d24:	08005e19 	.word	0x08005e19
 8005d28:	08005db3 	.word	0x08005db3
 8005d2c:	08005e19 	.word	0x08005e19
 8005d30:	08005e19 	.word	0x08005e19
 8005d34:	08005e19 	.word	0x08005e19
 8005d38:	08005dc3 	.word	0x08005dc3
 8005d3c:	08005e19 	.word	0x08005e19
 8005d40:	08005e19 	.word	0x08005e19
 8005d44:	08005e19 	.word	0x08005e19
 8005d48:	08005e19 	.word	0x08005e19
 8005d4c:	08005e19 	.word	0x08005e19
 8005d50:	08005e19 	.word	0x08005e19
 8005d54:	08005e19 	.word	0x08005e19
 8005d58:	08005dd3 	.word	0x08005dd3
 8005d5c:	08005e19 	.word	0x08005e19
 8005d60:	08005e19 	.word	0x08005e19
 8005d64:	08005e19 	.word	0x08005e19
 8005d68:	08005e19 	.word	0x08005e19
 8005d6c:	08005e19 	.word	0x08005e19
 8005d70:	08005e19 	.word	0x08005e19
 8005d74:	08005e19 	.word	0x08005e19
 8005d78:	08005e19 	.word	0x08005e19
 8005d7c:	08005e19 	.word	0x08005e19
 8005d80:	08005e19 	.word	0x08005e19
 8005d84:	08005e19 	.word	0x08005e19
 8005d88:	08005e19 	.word	0x08005e19
 8005d8c:	08005e19 	.word	0x08005e19
 8005d90:	08005e19 	.word	0x08005e19
 8005d94:	08005e19 	.word	0x08005e19
 8005d98:	08005e0b 	.word	0x08005e0b
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	d037      	beq.n	8005e10 <UART_SetConfig+0xc44>
 8005da0:	e03a      	b.n	8005e18 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da2:	f7fd f81d 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8005da6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005da8:	e03c      	b.n	8005e24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005daa:	f7fd f82f 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8005dae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005db0:	e038      	b.n	8005e24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fa36 	bl	8004228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc0:	e030      	b.n	8005e24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dc2:	f107 0318 	add.w	r3, r7, #24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fb82 	bl	80044d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd0:	e028      	b.n	8005e24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd2:	4b09      	ldr	r3, [pc, #36]	@ (8005df8 <UART_SetConfig+0xc2c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d012      	beq.n	8005e04 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dde:	4b06      	ldr	r3, [pc, #24]	@ (8005df8 <UART_SetConfig+0xc2c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	08db      	lsrs	r3, r3, #3
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	4a04      	ldr	r2, [pc, #16]	@ (8005dfc <UART_SetConfig+0xc30>)
 8005dea:	fa22 f303 	lsr.w	r3, r2, r3
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005df0:	e018      	b.n	8005e24 <UART_SetConfig+0xc58>
 8005df2:	bf00      	nop
 8005df4:	0800927c 	.word	0x0800927c
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	03d09000 	.word	0x03d09000
 8005e00:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b24      	ldr	r3, [pc, #144]	@ (8005e98 <UART_SetConfig+0xccc>)
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e08:	e00c      	b.n	8005e24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e0a:	4b24      	ldr	r3, [pc, #144]	@ (8005e9c <UART_SetConfig+0xcd0>)
 8005e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e0e:	e009      	b.n	8005e24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e16:	e005      	b.n	8005e24 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e22:	bf00      	nop
    }

    if (pclk != 0U)
 8005e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d021      	beq.n	8005e6e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <UART_SetConfig+0xcd4>)
 8005e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e38:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	441a      	add	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d909      	bls.n	8005e68 <UART_SetConfig+0xc9c>
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5a:	d205      	bcs.n	8005e68 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e002      	b.n	8005e6e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2200      	movs	r2, #0
 8005e82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2200      	movs	r2, #0
 8005e88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e8a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3748      	adds	r7, #72	@ 0x48
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	003d0900 	.word	0x003d0900
 8005ea0:	0800927c 	.word	0x0800927c

08005ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01a      	beq.n	8005fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fa2:	d10a      	bne.n	8005fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b098      	sub	sp, #96	@ 0x60
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff8:	f7fb f888 	bl	800110c <HAL_GetTick>
 8005ffc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b08      	cmp	r3, #8
 800600a:	d12f      	bne.n	800606c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006014:	2200      	movs	r2, #0
 8006016:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f88e 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d022      	beq.n	800606c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800603a:	653b      	str	r3, [r7, #80]	@ 0x50
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006044:	647b      	str	r3, [r7, #68]	@ 0x44
 8006046:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800604a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e063      	b.n	8006134 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b04      	cmp	r3, #4
 8006078:	d149      	bne.n	800610e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006082:	2200      	movs	r2, #0
 8006084:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f857 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d03c      	beq.n	800610e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	623b      	str	r3, [r7, #32]
   return(result);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060e6:	61fa      	str	r2, [r7, #28]
 80060e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	617b      	str	r3, [r7, #20]
   return(result);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e012      	b.n	8006134 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3758      	adds	r7, #88	@ 0x58
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614c:	e04f      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d04b      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fa ffd9 	bl	800110c <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <UART_WaitOnFlagUntilTimeout+0x30>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e04e      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d037      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b80      	cmp	r3, #128	@ 0x80
 8006182:	d034      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b40      	cmp	r3, #64	@ 0x40
 8006188:	d031      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d110      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2208      	movs	r2, #8
 800619e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f839 	bl	8006218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2208      	movs	r2, #8
 80061aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e029      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c8:	d111      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f81f 	bl	8006218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e00f      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4013      	ands	r3, r2
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	bf0c      	ite	eq
 80061fe:	2301      	moveq	r3, #1
 8006200:	2300      	movne	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	429a      	cmp	r2, r3
 800620a:	d0a0      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b095      	sub	sp, #84	@ 0x54
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006240:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e6      	bne.n	8006220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	61fb      	str	r3, [r7, #28]
   return(result);
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	4b1e      	ldr	r3, [pc, #120]	@ (80062e0 <UART_EndRxTransfer+0xc8>)
 8006266:	4013      	ands	r3, r2
 8006268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e5      	bne.n	8006252 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d118      	bne.n	80062c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	60bb      	str	r3, [r7, #8]
   return(result);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f023 0310 	bic.w	r3, r3, #16
 80062a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e6      	bne.n	800628e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062d4:	bf00      	nop
 80062d6:	3754      	adds	r7, #84	@ 0x54
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	effffffe 	.word	0xeffffffe

080062e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_UARTEx_DisableFifoMode+0x16>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e027      	b.n	800634a <HAL_UARTEx_DisableFifoMode+0x66>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2224      	movs	r2, #36	@ 0x24
 8006306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006328:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800636a:	2302      	movs	r3, #2
 800636c:	e02d      	b.n	80063ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2224      	movs	r2, #36	@ 0x24
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f850 	bl	8006450 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e02d      	b.n	8006446 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2224      	movs	r2, #36	@ 0x24
 80063f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f812 	bl	8006450 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800645c:	2b00      	cmp	r3, #0
 800645e:	d108      	bne.n	8006472 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006470:	e031      	b.n	80064d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006472:	2310      	movs	r3, #16
 8006474:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006476:	2310      	movs	r3, #16
 8006478:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	0e5b      	lsrs	r3, r3, #25
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	0f5b      	lsrs	r3, r3, #29
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	7b3a      	ldrb	r2, [r7, #12]
 800649e:	4911      	ldr	r1, [pc, #68]	@ (80064e4 <UARTEx_SetNbDataToProcess+0x94>)
 80064a0:	5c8a      	ldrb	r2, [r1, r2]
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064a6:	7b3a      	ldrb	r2, [r7, #12]
 80064a8:	490f      	ldr	r1, [pc, #60]	@ (80064e8 <UARTEx_SetNbDataToProcess+0x98>)
 80064aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	7b7a      	ldrb	r2, [r7, #13]
 80064bc:	4909      	ldr	r1, [pc, #36]	@ (80064e4 <UARTEx_SetNbDataToProcess+0x94>)
 80064be:	5c8a      	ldrb	r2, [r1, r2]
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064c4:	7b7a      	ldrb	r2, [r7, #13]
 80064c6:	4908      	ldr	r1, [pc, #32]	@ (80064e8 <UARTEx_SetNbDataToProcess+0x98>)
 80064c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	08009294 	.word	0x08009294
 80064e8:	0800929c 	.word	0x0800929c

080064ec <__NVIC_SetPriority>:
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80064f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	db0a      	blt.n	8006516 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	b2da      	uxtb	r2, r3
 8006504:	490c      	ldr	r1, [pc, #48]	@ (8006538 <__NVIC_SetPriority+0x4c>)
 8006506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800650a:	0112      	lsls	r2, r2, #4
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	440b      	add	r3, r1
 8006510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006514:	e00a      	b.n	800652c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4908      	ldr	r1, [pc, #32]	@ (800653c <__NVIC_SetPriority+0x50>)
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	3b04      	subs	r3, #4
 8006524:	0112      	lsls	r2, r2, #4
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	440b      	add	r3, r1
 800652a:	761a      	strb	r2, [r3, #24]
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	e000e100 	.word	0xe000e100
 800653c:	e000ed00 	.word	0xe000ed00

08006540 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006544:	4b05      	ldr	r3, [pc, #20]	@ (800655c <SysTick_Handler+0x1c>)
 8006546:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006548:	f001 fd98 	bl	800807c <xTaskGetSchedulerState>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d001      	beq.n	8006556 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006552:	f002 fb91 	bl	8008c78 <xPortSysTickHandler>
  }
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	e000e010 	.word	0xe000e010

08006560 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006564:	2100      	movs	r1, #0
 8006566:	f06f 0004 	mvn.w	r0, #4
 800656a:	f7ff ffbf 	bl	80064ec <__NVIC_SetPriority>
#endif
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800657a:	f3ef 8305 	mrs	r3, IPSR
 800657e:	603b      	str	r3, [r7, #0]
  return(result);
 8006580:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006586:	f06f 0305 	mvn.w	r3, #5
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	e00c      	b.n	80065a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800658e:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <osKernelInitialize+0x44>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006596:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <osKernelInitialize+0x44>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800659c:	2300      	movs	r3, #0
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	e002      	b.n	80065a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065a8:	687b      	ldr	r3, [r7, #4]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	240002cc 	.word	0x240002cc

080065bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c2:	f3ef 8305 	mrs	r3, IPSR
 80065c6:	603b      	str	r3, [r7, #0]
  return(result);
 80065c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80065ce:	f06f 0305 	mvn.w	r3, #5
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e010      	b.n	80065f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <osKernelStart+0x48>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d109      	bne.n	80065f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065de:	f7ff ffbf 	bl	8006560 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <osKernelStart+0x48>)
 80065e4:	2202      	movs	r2, #2
 80065e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065e8:	f001 f8fa 	bl	80077e0 <vTaskStartScheduler>
      stat = osOK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	e002      	b.n	80065f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065f8:	687b      	ldr	r3, [r7, #4]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	240002cc 	.word	0x240002cc

08006608 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	@ 0x38
 800660c:	af04      	add	r7, sp, #16
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006618:	f3ef 8305 	mrs	r3, IPSR
 800661c:	617b      	str	r3, [r7, #20]
  return(result);
 800661e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006620:	2b00      	cmp	r3, #0
 8006622:	d17e      	bne.n	8006722 <osThreadNew+0x11a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d07b      	beq.n	8006722 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800662e:	2318      	movs	r3, #24
 8006630:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d045      	beq.n	80066ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <osThreadNew+0x48>
        name = attr->name;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <osThreadNew+0x6e>
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b38      	cmp	r3, #56	@ 0x38
 8006668:	d805      	bhi.n	8006676 <osThreadNew+0x6e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <osThreadNew+0x72>
        return (NULL);
 8006676:	2300      	movs	r3, #0
 8006678:	e054      	b.n	8006724 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	089b      	lsrs	r3, r3, #2
 8006688:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <osThreadNew+0xa8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b5b      	cmp	r3, #91	@ 0x5b
 8006698:	d90a      	bls.n	80066b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d006      	beq.n	80066b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <osThreadNew+0xa8>
        mem = 1;
 80066aa:	2301      	movs	r3, #1
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e010      	b.n	80066d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <osThreadNew+0xca>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <osThreadNew+0xca>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <osThreadNew+0xca>
          mem = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	e001      	b.n	80066d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d110      	bne.n	80066fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066e0:	9202      	str	r2, [sp, #8]
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6a3a      	ldr	r2, [r7, #32]
 80066ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fe1a 	bl	8007328 <xTaskCreateStatic>
 80066f4:	4603      	mov	r3, r0
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	e013      	b.n	8006722 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d110      	bne.n	8006722 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	b29a      	uxth	r2, r3
 8006704:	f107 0310 	add.w	r3, r7, #16
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fe68 	bl	80073e8 <xTaskCreate>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d001      	beq.n	8006722 <osThreadNew+0x11a>
            hTask = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006722:	693b      	ldr	r3, [r7, #16]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3728      	adds	r7, #40	@ 0x28
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006734:	f3ef 8305 	mrs	r3, IPSR
 8006738:	60bb      	str	r3, [r7, #8]
  return(result);
 800673a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <osDelay+0x1c>
    stat = osErrorISR;
 8006740:	f06f 0305 	mvn.w	r3, #5
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e007      	b.n	8006758 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f80e 	bl	8007774 <vTaskDelay>
    }
  }

  return (stat);
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a07      	ldr	r2, [pc, #28]	@ (8006790 <vApplicationGetIdleTaskMemory+0x2c>)
 8006774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	4a06      	ldr	r2, [pc, #24]	@ (8006794 <vApplicationGetIdleTaskMemory+0x30>)
 800677a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2280      	movs	r2, #128	@ 0x80
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	240002d0 	.word	0x240002d0
 8006794:	2400032c 	.word	0x2400032c

08006798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a07      	ldr	r2, [pc, #28]	@ (80067c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80067a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4a06      	ldr	r2, [pc, #24]	@ (80067c8 <vApplicationGetTimerTaskMemory+0x30>)
 80067ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	2400052c 	.word	0x2400052c
 80067c8:	24000588 	.word	0x24000588

080067cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f103 0208 	add.w	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f103 0208 	add.w	r2, r3, #8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f103 0208 	add.w	r2, r3, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d103      	bne.n	800688e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e00c      	b.n	80068a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3308      	adds	r3, #8
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e002      	b.n	800689c <vListInsert+0x2e>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d2f6      	bcs.n	8006896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6892      	ldr	r2, [r2, #8]
 80068f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6852      	ldr	r2, [r2, #4]
 8006900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d103      	bne.n	8006914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1e5a      	subs	r2, r3, #1
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	e7fd      	b.n	800695c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006960:	f002 f8fa 	bl	8008b58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006990:	3b01      	subs	r3, #1
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006996:	fb01 f303 	mul.w	r3, r1, r3
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	22ff      	movs	r2, #255	@ 0xff
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	22ff      	movs	r2, #255	@ 0xff
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d114      	bne.n	80069e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01a      	beq.n	80069f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3310      	adds	r3, #16
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 f99a 	bl	8007cfc <xTaskRemoveFromEventList>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d012      	beq.n	80069f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <xQueueGenericReset+0xd0>)
 80069d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	e009      	b.n	80069f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3310      	adds	r3, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fef1 	bl	80067cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3324      	adds	r3, #36	@ 0x24
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff feec 	bl	80067cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069f4:	f002 f8e2 	bl	8008bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069f8:	2301      	movs	r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	@ 0x38
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <xQueueGenericCreateStatic+0x56>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <xQueueGenericCreateStatic+0x5a>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueGenericCreateStatic+0x5c>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	623b      	str	r3, [r7, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <xQueueGenericCreateStatic+0x84>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <xQueueGenericCreateStatic+0x88>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <xQueueGenericCreateStatic+0x8a>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	61fb      	str	r3, [r7, #28]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aae:	2350      	movs	r3, #80	@ 0x50
 8006ab0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b50      	cmp	r3, #80	@ 0x50
 8006ab6:	d00b      	beq.n	8006ad0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	61bb      	str	r3, [r7, #24]
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ad0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00d      	beq.n	8006af8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ae4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f805 	bl	8006b02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3730      	adds	r7, #48	@ 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b30:	2101      	movs	r1, #1
 8006b32:	69b8      	ldr	r0, [r7, #24]
 8006b34:	f7ff fefe 	bl	8006934 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	@ 0x38
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b56:	2300      	movs	r3, #0
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10b      	bne.n	8006b7c <xQueueGenericSend+0x34>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	e7fd      	b.n	8006b78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d103      	bne.n	8006b8a <xQueueGenericSend+0x42>
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <xQueueGenericSend+0x46>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <xQueueGenericSend+0x48>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <xQueueGenericSend+0x64>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d103      	bne.n	8006bba <xQueueGenericSend+0x72>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <xQueueGenericSend+0x76>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueGenericSend+0x78>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <xQueueGenericSend+0x94>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	623b      	str	r3, [r7, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bdc:	f001 fa4e 	bl	800807c <xTaskGetSchedulerState>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <xQueueGenericSend+0xa4>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <xQueueGenericSend+0xa8>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <xQueueGenericSend+0xaa>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <xQueueGenericSend+0xc6>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c0e:	f001 ffa3 	bl	8008b58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d302      	bcc.n	8006c24 <xQueueGenericSend+0xdc>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d129      	bne.n	8006c78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c2a:	f000 fa0f 	bl	800704c <prvCopyDataToQueue>
 8006c2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	3324      	adds	r3, #36	@ 0x24
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f85d 	bl	8007cfc <xTaskRemoveFromEventList>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c48:	4b3f      	ldr	r3, [pc, #252]	@ (8006d48 <xQueueGenericSend+0x200>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	e00a      	b.n	8006c70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c60:	4b39      	ldr	r3, [pc, #228]	@ (8006d48 <xQueueGenericSend+0x200>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c70:	f001 ffa4 	bl	8008bbc <vPortExitCritical>
				return pdPASS;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e063      	b.n	8006d40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c7e:	f001 ff9d 	bl	8008bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e05c      	b.n	8006d40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f897 	bl	8007dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c9a:	f001 ff8f 	bl	8008bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c9e:	f000 fe07 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ca2:	f001 ff59 	bl	8008b58 <vPortEnterCritical>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cac:	b25b      	sxtb	r3, r3
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d103      	bne.n	8006cbc <xQueueGenericSend+0x174>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cc2:	b25b      	sxtb	r3, r3
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSend+0x18a>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cd2:	f001 ff73 	bl	8008bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd6:	1d3a      	adds	r2, r7, #4
 8006cd8:	f107 0314 	add.w	r3, r7, #20
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 f886 	bl	8007df0 <xTaskCheckForTimeOut>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d124      	bne.n	8006d34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cec:	f000 faa6 	bl	800723c <prvIsQueueFull>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ffaa 	bl	8007c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d06:	f000 fa31 	bl	800716c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d0a:	f000 fddf 	bl	80078cc <xTaskResumeAll>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f47f af7c 	bne.w	8006c0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006d16:	4b0c      	ldr	r3, [pc, #48]	@ (8006d48 <xQueueGenericSend+0x200>)
 8006d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	e772      	b.n	8006c0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d2a:	f000 fa1f 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d2e:	f000 fdcd 	bl	80078cc <xTaskResumeAll>
 8006d32:	e76c      	b.n	8006c0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d36:	f000 fa19 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d3a:	f000 fdc7 	bl	80078cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3738      	adds	r7, #56	@ 0x38
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b090      	sub	sp, #64	@ 0x40
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <xQueueGenericSendFromISR+0x3e>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <xQueueGenericSendFromISR+0x42>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <xQueueGenericSendFromISR+0x44>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d103      	bne.n	8006dba <xQueueGenericSendFromISR+0x6e>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <xQueueGenericSendFromISR+0x72>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <xQueueGenericSendFromISR+0x74>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	623b      	str	r3, [r7, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ddc:	f001 ff9c 	bl	8008d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006de0:	f3ef 8211 	mrs	r2, BASEPRI
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	61fa      	str	r2, [r7, #28]
 8006df6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006df8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <xQueueGenericSendFromISR+0xc2>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d12f      	bne.n	8006e6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e24:	f000 f912 	bl	800704c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d112      	bne.n	8006e58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	3324      	adds	r3, #36	@ 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 ff5c 	bl	8007cfc <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e007      	b.n	8006e68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	b25a      	sxtb	r2, r3
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e6c:	e001      	b.n	8006e72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3740      	adds	r7, #64	@ 0x40
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08c      	sub	sp, #48	@ 0x30
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10b      	bne.n	8006eba <xQueueReceive+0x32>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	623b      	str	r3, [r7, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop
 8006eb8:	e7fd      	b.n	8006eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <xQueueReceive+0x40>
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <xQueueReceive+0x44>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <xQueueReceive+0x46>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <xQueueReceive+0x62>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	61fb      	str	r3, [r7, #28]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eea:	f001 f8c7 	bl	800807c <xTaskGetSchedulerState>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <xQueueReceive+0x72>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <xQueueReceive+0x76>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueReceive+0x78>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <xQueueReceive+0x94>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	61bb      	str	r3, [r7, #24]
}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	e7fd      	b.n	8006f18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f1c:	f001 fe1c 	bl	8008b58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01f      	beq.n	8006f6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f30:	f000 f8f6 	bl	8007120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	1e5a      	subs	r2, r3, #1
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00f      	beq.n	8006f64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f46:	3310      	adds	r3, #16
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fed7 	bl	8007cfc <xTaskRemoveFromEventList>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f54:	4b3c      	ldr	r3, [pc, #240]	@ (8007048 <xQueueReceive+0x1c0>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f64:	f001 fe2a 	bl	8008bbc <vPortExitCritical>
				return pdPASS;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e069      	b.n	8007040 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f72:	f001 fe23 	bl	8008bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e062      	b.n	8007040 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 ff1d 	bl	8007dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f8e:	f001 fe15 	bl	8008bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f92:	f000 fc8d 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f96:	f001 fddf 	bl	8008b58 <vPortEnterCritical>
 8006f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d103      	bne.n	8006fb0 <xQueueReceive+0x128>
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fb6:	b25b      	sxtb	r3, r3
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d103      	bne.n	8006fc6 <xQueueReceive+0x13e>
 8006fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fc6:	f001 fdf9 	bl	8008bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fca:	1d3a      	adds	r2, r7, #4
 8006fcc:	f107 0310 	add.w	r3, r7, #16
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 ff0c 	bl	8007df0 <xTaskCheckForTimeOut>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d123      	bne.n	8007026 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fe0:	f000 f916 	bl	8007210 <prvIsQueueEmpty>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d017      	beq.n	800701a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	3324      	adds	r3, #36	@ 0x24
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fe30 	bl	8007c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ffa:	f000 f8b7 	bl	800716c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ffe:	f000 fc65 	bl	80078cc <xTaskResumeAll>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d189      	bne.n	8006f1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007008:	4b0f      	ldr	r3, [pc, #60]	@ (8007048 <xQueueReceive+0x1c0>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	e780      	b.n	8006f1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800701a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800701c:	f000 f8a6 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007020:	f000 fc54 	bl	80078cc <xTaskResumeAll>
 8007024:	e77a      	b.n	8006f1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007028:	f000 f8a0 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800702c:	f000 fc4e 	bl	80078cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007032:	f000 f8ed 	bl	8007210 <prvIsQueueEmpty>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f43f af6f 	beq.w	8006f1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800703e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	@ 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d14d      	bne.n	800710e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	4618      	mov	r0, r3
 8007078:	f001 f81e 	bl	80080b8 <xTaskPriorityDisinherit>
 800707c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	609a      	str	r2, [r3, #8]
 8007084:	e043      	b.n	800710e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d119      	bne.n	80070c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6858      	ldr	r0, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007094:	461a      	mov	r2, r3
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	f002 f89a 	bl	80091d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	441a      	add	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d32b      	bcc.n	800710e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	e026      	b.n	800710e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68d8      	ldr	r0, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	461a      	mov	r2, r3
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	f002 f880 	bl	80091d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d8:	425b      	negs	r3, r3
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d207      	bcs.n	80070fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f4:	425b      	negs	r3, r3
 80070f6:	441a      	add	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d105      	bne.n	800710e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3b01      	subs	r3, #1
 800710c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007116:	697b      	ldr	r3, [r7, #20]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d018      	beq.n	8007164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713a:	441a      	add	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d303      	bcc.n	8007154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68d9      	ldr	r1, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	461a      	mov	r2, r3
 800715e:	6838      	ldr	r0, [r7, #0]
 8007160:	f002 f836 	bl	80091d0 <memcpy>
	}
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007174:	f001 fcf0 	bl	8008b58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800717e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007180:	e011      	b.n	80071a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d012      	beq.n	80071b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3324      	adds	r3, #36	@ 0x24
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fdb4 	bl	8007cfc <xTaskRemoveFromEventList>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800719a:	f000 fe8d 	bl	8007eb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dce9      	bgt.n	8007182 <prvUnlockQueue+0x16>
 80071ae:	e000      	b.n	80071b2 <prvUnlockQueue+0x46>
					break;
 80071b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	22ff      	movs	r2, #255	@ 0xff
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80071ba:	f001 fcff 	bl	8008bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071be:	f001 fccb 	bl	8008b58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ca:	e011      	b.n	80071f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3310      	adds	r3, #16
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fd8f 	bl	8007cfc <xTaskRemoveFromEventList>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071e4:	f000 fe68 	bl	8007eb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dce9      	bgt.n	80071cc <prvUnlockQueue+0x60>
 80071f8:	e000      	b.n	80071fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	22ff      	movs	r2, #255	@ 0xff
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007204:	f001 fcda 	bl	8008bbc <vPortExitCritical>
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007218:	f001 fc9e 	bl	8008b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007224:	2301      	movs	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e001      	b.n	800722e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800722e:	f001 fcc5 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007244:	f001 fc88 	bl	8008b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	429a      	cmp	r2, r3
 8007252:	d102      	bne.n	800725a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e001      	b.n	800725e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800725e:	f001 fcad 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 8007262:	68fb      	ldr	r3, [r7, #12]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	e014      	b.n	80072a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800727c:	4a0f      	ldr	r2, [pc, #60]	@ (80072bc <vQueueAddToRegistry+0x50>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007288:	490c      	ldr	r1, [pc, #48]	@ (80072bc <vQueueAddToRegistry+0x50>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007292:	4a0a      	ldr	r2, [pc, #40]	@ (80072bc <vQueueAddToRegistry+0x50>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800729e:	e006      	b.n	80072ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	d9e7      	bls.n	800727c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	24000988 	.word	0x24000988

080072c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072d0:	f001 fc42 	bl	8008b58 <vPortEnterCritical>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072da:	b25b      	sxtb	r3, r3
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e0:	d103      	bne.n	80072ea <vQueueWaitForMessageRestricted+0x2a>
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072f0:	b25b      	sxtb	r3, r3
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f6:	d103      	bne.n	8007300 <vQueueWaitForMessageRestricted+0x40>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007300:	f001 fc5c 	bl	8008bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3324      	adds	r3, #36	@ 0x24
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fcc5 	bl	8007ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800731a:	6978      	ldr	r0, [r7, #20]
 800731c:	f7ff ff26 	bl	800716c <prvUnlockQueue>
	}
 8007320:	bf00      	nop
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08e      	sub	sp, #56	@ 0x38
 800732c:	af04      	add	r7, sp, #16
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <xTaskCreateStatic+0x2c>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	623b      	str	r3, [r7, #32]
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <xTaskCreateStatic+0x4a>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	61fb      	str	r3, [r7, #28]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007372:	235c      	movs	r3, #92	@ 0x5c
 8007374:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b5c      	cmp	r3, #92	@ 0x5c
 800737a:	d00b      	beq.n	8007394 <xTaskCreateStatic+0x6c>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	61bb      	str	r3, [r7, #24]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007394:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01e      	beq.n	80073da <xTaskCreateStatic+0xb2>
 800739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01b      	beq.n	80073da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073b4:	2300      	movs	r3, #0
 80073b6:	9303      	str	r3, [sp, #12]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	9302      	str	r3, [sp, #8]
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f850 	bl	8007472 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073d4:	f000 f8de 	bl	8007594 <prvAddNewTaskToReadyList>
 80073d8:	e001      	b.n	80073de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073de:	697b      	ldr	r3, [r7, #20]
	}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3728      	adds	r7, #40	@ 0x28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08c      	sub	sp, #48	@ 0x30
 80073ec:	af04      	add	r7, sp, #16
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 fccd 	bl	8008d9c <pvPortMalloc>
 8007402:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800740a:	205c      	movs	r0, #92	@ 0x5c
 800740c:	f001 fcc6 	bl	8008d9c <pvPortMalloc>
 8007410:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	631a      	str	r2, [r3, #48]	@ 0x30
 800741e:	e005      	b.n	800742c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007420:	6978      	ldr	r0, [r7, #20]
 8007422:	f001 fd89 	bl	8008f38 <vPortFree>
 8007426:	e001      	b.n	800742c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d017      	beq.n	8007462 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	2300      	movs	r3, #0
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	9302      	str	r3, [sp, #8]
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f80e 	bl	8007472 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007456:	69f8      	ldr	r0, [r7, #28]
 8007458:	f000 f89c 	bl	8007594 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800745c:	2301      	movs	r3, #1
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e002      	b.n	8007468 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007462:	f04f 33ff 	mov.w	r3, #4294967295
 8007466:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007468:	69bb      	ldr	r3, [r7, #24]
	}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b088      	sub	sp, #32
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	461a      	mov	r2, r3
 800748a:	21a5      	movs	r1, #165	@ 0xa5
 800748c:	f001 fe74 	bl	8009178 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800749a:	440b      	add	r3, r1
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f023 0307 	bic.w	r3, r3, #7
 80074a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	617b      	str	r3, [r7, #20]
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01f      	beq.n	8007512 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d2:	2300      	movs	r3, #0
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	e012      	b.n	80074fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	4413      	add	r3, r2
 80074de:	7819      	ldrb	r1, [r3, #0]
 80074e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	3334      	adds	r3, #52	@ 0x34
 80074e8:	460a      	mov	r2, r1
 80074ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	4413      	add	r3, r2
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3301      	adds	r3, #1
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b0f      	cmp	r3, #15
 8007502:	d9e9      	bls.n	80074d8 <prvInitialiseNewTask+0x66>
 8007504:	e000      	b.n	8007508 <prvInitialiseNewTask+0x96>
			{
				break;
 8007506:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007510:	e003      	b.n	800751a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	2b37      	cmp	r3, #55	@ 0x37
 800751e:	d901      	bls.n	8007524 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007520:	2337      	movs	r3, #55	@ 0x37
 8007522:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007528:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800752e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007532:	2200      	movs	r2, #0
 8007534:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	3304      	adds	r3, #4
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff f966 	bl	800680c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	3318      	adds	r3, #24
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff f961 	bl	800680c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007552:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800755e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	2200      	movs	r2, #0
 8007564:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	69b8      	ldr	r0, [r7, #24]
 8007574:	f001 f9be 	bl	80088f4 <pxPortInitialiseStack>
 8007578:	4602      	mov	r2, r0
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007588:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800758a:	bf00      	nop
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800759c:	f001 fadc 	bl	8008b58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007658 <prvAddNewTaskToReadyList+0xc4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3301      	adds	r3, #1
 80075a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007658 <prvAddNewTaskToReadyList+0xc4>)
 80075a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075aa:	4b2c      	ldr	r3, [pc, #176]	@ (800765c <prvAddNewTaskToReadyList+0xc8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075b2:	4a2a      	ldr	r2, [pc, #168]	@ (800765c <prvAddNewTaskToReadyList+0xc8>)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075b8:	4b27      	ldr	r3, [pc, #156]	@ (8007658 <prvAddNewTaskToReadyList+0xc4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d110      	bne.n	80075e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075c0:	f000 fc9e 	bl	8007f00 <prvInitialiseTaskLists>
 80075c4:	e00d      	b.n	80075e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075c6:	4b26      	ldr	r3, [pc, #152]	@ (8007660 <prvAddNewTaskToReadyList+0xcc>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075ce:	4b23      	ldr	r3, [pc, #140]	@ (800765c <prvAddNewTaskToReadyList+0xc8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d802      	bhi.n	80075e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075dc:	4a1f      	ldr	r2, [pc, #124]	@ (800765c <prvAddNewTaskToReadyList+0xc8>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075e2:	4b20      	ldr	r3, [pc, #128]	@ (8007664 <prvAddNewTaskToReadyList+0xd0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3301      	adds	r3, #1
 80075e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007664 <prvAddNewTaskToReadyList+0xd0>)
 80075ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <prvAddNewTaskToReadyList+0xd0>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <prvAddNewTaskToReadyList+0xd4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d903      	bls.n	8007608 <prvAddNewTaskToReadyList+0x74>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	4a18      	ldr	r2, [pc, #96]	@ (8007668 <prvAddNewTaskToReadyList+0xd4>)
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4a15      	ldr	r2, [pc, #84]	@ (800766c <prvAddNewTaskToReadyList+0xd8>)
 8007616:	441a      	add	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7ff f901 	bl	8006826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007624:	f001 faca 	bl	8008bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007628:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <prvAddNewTaskToReadyList+0xcc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00e      	beq.n	800764e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <prvAddNewTaskToReadyList+0xc8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	429a      	cmp	r2, r3
 800763c:	d207      	bcs.n	800764e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800763e:	4b0c      	ldr	r3, [pc, #48]	@ (8007670 <prvAddNewTaskToReadyList+0xdc>)
 8007640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	24000e9c 	.word	0x24000e9c
 800765c:	240009c8 	.word	0x240009c8
 8007660:	24000ea8 	.word	0x24000ea8
 8007664:	24000eb8 	.word	0x24000eb8
 8007668:	24000ea4 	.word	0x24000ea4
 800766c:	240009cc 	.word	0x240009cc
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	@ 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	617b      	str	r3, [r7, #20]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <vTaskDelayUntil+0x4a>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	613b      	str	r3, [r7, #16]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80076be:	4b2a      	ldr	r3, [pc, #168]	@ (8007768 <vTaskDelayUntil+0xf4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <vTaskDelayUntil+0x6a>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60fb      	str	r3, [r7, #12]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80076de:	f000 f8e7 	bl	80078b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80076e2:	4b22      	ldr	r3, [pc, #136]	@ (800776c <vTaskDelayUntil+0xf8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	4413      	add	r3, r2
 80076f0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a3a      	ldr	r2, [r7, #32]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d20b      	bcs.n	8007714 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	429a      	cmp	r2, r3
 8007704:	d211      	bcs.n	800772a <vTaskDelayUntil+0xb6>
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	429a      	cmp	r2, r3
 800770c:	d90d      	bls.n	800772a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	627b      	str	r3, [r7, #36]	@ 0x24
 8007712:	e00a      	b.n	800772a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	429a      	cmp	r2, r3
 800771c:	d303      	bcc.n	8007726 <vTaskDelayUntil+0xb2>
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	429a      	cmp	r2, r3
 8007724:	d901      	bls.n	800772a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007726:	2301      	movs	r3, #1
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fd2a 	bl	8008198 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007744:	f000 f8c2 	bl	80078cc <xTaskResumeAll>
 8007748:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d107      	bne.n	8007760 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <vTaskDelayUntil+0xfc>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007760:	bf00      	nop
 8007762:	3728      	adds	r7, #40	@ 0x28
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	24000ec4 	.word	0x24000ec4
 800776c:	24000ea0 	.word	0x24000ea0
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007786:	4b14      	ldr	r3, [pc, #80]	@ (80077d8 <vTaskDelay+0x64>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <vTaskDelay+0x32>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077a6:	f000 f883 	bl	80078b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077aa:	2100      	movs	r1, #0
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fcf3 	bl	8008198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077b2:	f000 f88b 	bl	80078cc <xTaskResumeAll>
 80077b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d107      	bne.n	80077ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077be:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <vTaskDelay+0x68>)
 80077c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	24000ec4 	.word	0x24000ec4
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	@ 0x28
 80077e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ee:	463a      	mov	r2, r7
 80077f0:	1d39      	adds	r1, r7, #4
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe ffb4 	bl	8006764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	9202      	str	r2, [sp, #8]
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	2300      	movs	r3, #0
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	2300      	movs	r3, #0
 800780c:	460a      	mov	r2, r1
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <vTaskStartScheduler+0xb8>)
 8007810:	4822      	ldr	r0, [pc, #136]	@ (800789c <vTaskStartScheduler+0xbc>)
 8007812:	f7ff fd89 	bl	8007328 <xTaskCreateStatic>
 8007816:	4603      	mov	r3, r0
 8007818:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <vTaskStartScheduler+0xc0>)
 800781a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800781c:	4b20      	ldr	r3, [pc, #128]	@ (80078a0 <vTaskStartScheduler+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e001      	b.n	800782e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d102      	bne.n	800783a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007834:	f000 fd04 	bl	8008240 <xTimerCreateTimerTask>
 8007838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d116      	bne.n	800786e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007854:	4b13      	ldr	r3, [pc, #76]	@ (80078a4 <vTaskStartScheduler+0xc4>)
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <vTaskStartScheduler+0xc8>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <vTaskStartScheduler+0xcc>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007868:	f001 f8d2 	bl	8008a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800786c:	e00f      	b.n	800788e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d10b      	bne.n	800788e <vTaskStartScheduler+0xae>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60fb      	str	r3, [r7, #12]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <vTaskStartScheduler+0xaa>
}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	08009230 	.word	0x08009230
 800789c:	08007ed1 	.word	0x08007ed1
 80078a0:	24000ec0 	.word	0x24000ec0
 80078a4:	24000ebc 	.word	0x24000ebc
 80078a8:	24000ea8 	.word	0x24000ea8
 80078ac:	24000ea0 	.word	0x24000ea0

080078b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <vTaskSuspendAll+0x18>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	4a03      	ldr	r2, [pc, #12]	@ (80078c8 <vTaskSuspendAll+0x18>)
 80078bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078be:	bf00      	nop
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	24000ec4 	.word	0x24000ec4

080078cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078da:	4b42      	ldr	r3, [pc, #264]	@ (80079e4 <xTaskResumeAll+0x118>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <xTaskResumeAll+0x2e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	603b      	str	r3, [r7, #0]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078fa:	f001 f92d 	bl	8008b58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078fe:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <xTaskResumeAll+0x118>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3b01      	subs	r3, #1
 8007904:	4a37      	ldr	r2, [pc, #220]	@ (80079e4 <xTaskResumeAll+0x118>)
 8007906:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007908:	4b36      	ldr	r3, [pc, #216]	@ (80079e4 <xTaskResumeAll+0x118>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d162      	bne.n	80079d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007910:	4b35      	ldr	r3, [pc, #212]	@ (80079e8 <xTaskResumeAll+0x11c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d05e      	beq.n	80079d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007918:	e02f      	b.n	800797a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b34      	ldr	r3, [pc, #208]	@ (80079ec <xTaskResumeAll+0x120>)
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3318      	adds	r3, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe ffda 	bl	80068e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe ffd5 	bl	80068e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793a:	4b2d      	ldr	r3, [pc, #180]	@ (80079f0 <xTaskResumeAll+0x124>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <xTaskResumeAll+0x7e>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	4a2a      	ldr	r2, [pc, #168]	@ (80079f0 <xTaskResumeAll+0x124>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a27      	ldr	r2, [pc, #156]	@ (80079f4 <xTaskResumeAll+0x128>)
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe ff60 	bl	8006826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796a:	4b23      	ldr	r3, [pc, #140]	@ (80079f8 <xTaskResumeAll+0x12c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007974:	4b21      	ldr	r3, [pc, #132]	@ (80079fc <xTaskResumeAll+0x130>)
 8007976:	2201      	movs	r2, #1
 8007978:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800797a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ec <xTaskResumeAll+0x120>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cb      	bne.n	800791a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007988:	f000 fb58 	bl	800803c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800798c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a00 <xTaskResumeAll+0x134>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d010      	beq.n	80079ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007998:	f000 f846 	bl	8007a28 <xTaskIncrementTick>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079a2:	4b16      	ldr	r3, [pc, #88]	@ (80079fc <xTaskResumeAll+0x130>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f1      	bne.n	8007998 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079b4:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <xTaskResumeAll+0x134>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079ba:	4b10      	ldr	r3, [pc, #64]	@ (80079fc <xTaskResumeAll+0x130>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a04 <xTaskResumeAll+0x138>)
 80079c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f001 f8f1 	bl	8008bbc <vPortExitCritical>

	return xAlreadyYielded;
 80079da:	68bb      	ldr	r3, [r7, #8]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	24000ec4 	.word	0x24000ec4
 80079e8:	24000e9c 	.word	0x24000e9c
 80079ec:	24000e5c 	.word	0x24000e5c
 80079f0:	24000ea4 	.word	0x24000ea4
 80079f4:	240009cc 	.word	0x240009cc
 80079f8:	240009c8 	.word	0x240009c8
 80079fc:	24000eb0 	.word	0x24000eb0
 8007a00:	24000eac 	.word	0x24000eac
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <xTaskGetTickCount+0x1c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a14:	687b      	ldr	r3, [r7, #4]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	24000ea0 	.word	0x24000ea0

08007a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a32:	4b4f      	ldr	r3, [pc, #316]	@ (8007b70 <xTaskIncrementTick+0x148>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 8090 	bne.w	8007b5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b74 <xTaskIncrementTick+0x14c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a44:	4a4b      	ldr	r2, [pc, #300]	@ (8007b74 <xTaskIncrementTick+0x14c>)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d121      	bne.n	8007a94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a50:	4b49      	ldr	r3, [pc, #292]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <xTaskIncrementTick+0x46>
 8007a72:	4b41      	ldr	r3, [pc, #260]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	4b40      	ldr	r3, [pc, #256]	@ (8007b7c <xTaskIncrementTick+0x154>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	4a3e      	ldr	r2, [pc, #248]	@ (8007b7c <xTaskIncrementTick+0x154>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	4b3e      	ldr	r3, [pc, #248]	@ (8007b80 <xTaskIncrementTick+0x158>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b80 <xTaskIncrementTick+0x158>)
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	f000 fad4 	bl	800803c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a94:	4b3b      	ldr	r3, [pc, #236]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d349      	bcc.n	8007b32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	4b36      	ldr	r3, [pc, #216]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa8:	4b36      	ldr	r3, [pc, #216]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	601a      	str	r2, [r3, #0]
					break;
 8007ab0:	e03f      	b.n	8007b32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab2:	4b31      	ldr	r3, [pc, #196]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d203      	bcs.n	8007ad2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aca:	4a2e      	ldr	r2, [pc, #184]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ad0:	e02f      	b.n	8007b32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe ff02 	bl	80068e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fef9 	bl	80068e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af2:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <xTaskIncrementTick+0x160>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d903      	bls.n	8007b02 <xTaskIncrementTick+0xda>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	4a22      	ldr	r2, [pc, #136]	@ (8007b88 <xTaskIncrementTick+0x160>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <xTaskIncrementTick+0x164>)
 8007b10:	441a      	add	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe fe84 	bl	8006826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b22:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <xTaskIncrementTick+0x168>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3b8      	bcc.n	8007a9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b30:	e7b5      	b.n	8007a9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b32:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <xTaskIncrementTick+0x168>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	4914      	ldr	r1, [pc, #80]	@ (8007b8c <xTaskIncrementTick+0x164>)
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d901      	bls.n	8007b4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b4e:	4b11      	ldr	r3, [pc, #68]	@ (8007b94 <xTaskIncrementTick+0x16c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e004      	b.n	8007b66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <xTaskIncrementTick+0x170>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3301      	adds	r3, #1
 8007b62:	4a0d      	ldr	r2, [pc, #52]	@ (8007b98 <xTaskIncrementTick+0x170>)
 8007b64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b66:	697b      	ldr	r3, [r7, #20]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	24000ec4 	.word	0x24000ec4
 8007b74:	24000ea0 	.word	0x24000ea0
 8007b78:	24000e54 	.word	0x24000e54
 8007b7c:	24000e58 	.word	0x24000e58
 8007b80:	24000eb4 	.word	0x24000eb4
 8007b84:	24000ebc 	.word	0x24000ebc
 8007b88:	24000ea4 	.word	0x24000ea4
 8007b8c:	240009cc 	.word	0x240009cc
 8007b90:	240009c8 	.word	0x240009c8
 8007b94:	24000eb0 	.word	0x24000eb0
 8007b98:	24000eac 	.word	0x24000eac

08007b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ba2:	4b28      	ldr	r3, [pc, #160]	@ (8007c44 <vTaskSwitchContext+0xa8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007baa:	4b27      	ldr	r3, [pc, #156]	@ (8007c48 <vTaskSwitchContext+0xac>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bb0:	e042      	b.n	8007c38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bb2:	4b25      	ldr	r3, [pc, #148]	@ (8007c48 <vTaskSwitchContext+0xac>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb8:	4b24      	ldr	r3, [pc, #144]	@ (8007c4c <vTaskSwitchContext+0xb0>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e011      	b.n	8007be4 <vTaskSwitchContext+0x48>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <vTaskSwitchContext+0x42>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	607b      	str	r3, [r7, #4]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <vTaskSwitchContext+0x3e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	491a      	ldr	r1, [pc, #104]	@ (8007c50 <vTaskSwitchContext+0xb4>)
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0e3      	beq.n	8007bc0 <vTaskSwitchContext+0x24>
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4a13      	ldr	r2, [pc, #76]	@ (8007c50 <vTaskSwitchContext+0xb4>)
 8007c04:	4413      	add	r3, r2
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d104      	bne.n	8007c28 <vTaskSwitchContext+0x8c>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	4a09      	ldr	r2, [pc, #36]	@ (8007c54 <vTaskSwitchContext+0xb8>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4a06      	ldr	r2, [pc, #24]	@ (8007c4c <vTaskSwitchContext+0xb0>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6013      	str	r3, [r2, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	24000ec4 	.word	0x24000ec4
 8007c48:	24000eb0 	.word	0x24000eb0
 8007c4c:	24000ea4 	.word	0x24000ea4
 8007c50:	240009cc 	.word	0x240009cc
 8007c54:	240009c8 	.word	0x240009c8

08007c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c80:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <vTaskPlaceOnEventList+0x48>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3318      	adds	r3, #24
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fe fdf0 	bl	800686e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c8e:	2101      	movs	r1, #1
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f000 fa81 	bl	8008198 <prvAddCurrentTaskToDelayedList>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	240009c8 	.word	0x240009c8

08007ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	617b      	str	r3, [r7, #20]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cce:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7fe fda5 	bl	8006826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f000 fa54 	bl	8008198 <prvAddCurrentTaskToDelayedList>
	}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	240009c8 	.word	0x240009c8

08007cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fdd6 	bl	80068e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d34:	4b1d      	ldr	r3, [pc, #116]	@ (8007dac <xTaskRemoveFromEventList+0xb0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d11d      	bne.n	8007d78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fdcd 	bl	80068e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4a:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <xTaskRemoveFromEventList+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d903      	bls.n	8007d5a <xTaskRemoveFromEventList+0x5e>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	4a16      	ldr	r2, [pc, #88]	@ (8007db0 <xTaskRemoveFromEventList+0xb4>)
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4a13      	ldr	r2, [pc, #76]	@ (8007db4 <xTaskRemoveFromEventList+0xb8>)
 8007d68:	441a      	add	r2, r3
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f7fe fd58 	bl	8006826 <vListInsertEnd>
 8007d76:	e005      	b.n	8007d84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	480e      	ldr	r0, [pc, #56]	@ (8007db8 <xTaskRemoveFromEventList+0xbc>)
 8007d80:	f7fe fd51 	bl	8006826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <xTaskRemoveFromEventList+0xc0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d905      	bls.n	8007d9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d96:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc0 <xTaskRemoveFromEventList+0xc4>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e001      	b.n	8007da2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007da2:	697b      	ldr	r3, [r7, #20]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	24000ec4 	.word	0x24000ec4
 8007db0:	24000ea4 	.word	0x24000ea4
 8007db4:	240009cc 	.word	0x240009cc
 8007db8:	24000e5c 	.word	0x24000e5c
 8007dbc:	240009c8 	.word	0x240009c8
 8007dc0:	24000eb0 	.word	0x24000eb0

08007dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dcc:	4b06      	ldr	r3, [pc, #24]	@ (8007de8 <vTaskInternalSetTimeOutState+0x24>)
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dd4:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <vTaskInternalSetTimeOutState+0x28>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	605a      	str	r2, [r3, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	24000eb4 	.word	0x24000eb4
 8007dec:	24000ea0 	.word	0x24000ea0

08007df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10b      	bne.n	8007e18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	613b      	str	r3, [r7, #16]
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	e7fd      	b.n	8007e14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60fb      	str	r3, [r7, #12]
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e36:	f000 fe8f 	bl	8008b58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb0 <xTaskCheckForTimeOut+0xc0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e52:	d102      	bne.n	8007e5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e023      	b.n	8007ea2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b15      	ldr	r3, [pc, #84]	@ (8007eb4 <xTaskCheckForTimeOut+0xc4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d007      	beq.n	8007e76 <xTaskCheckForTimeOut+0x86>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d302      	bcc.n	8007e76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	61fb      	str	r3, [r7, #28]
 8007e74:	e015      	b.n	8007ea2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d20b      	bcs.n	8007e98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff ff99 	bl	8007dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	e004      	b.n	8007ea2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ea2:	f000 fe8b 	bl	8008bbc <vPortExitCritical>

	return xReturn;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	24000ea0 	.word	0x24000ea0
 8007eb4:	24000eb4 	.word	0x24000eb4

08007eb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ebc:	4b03      	ldr	r3, [pc, #12]	@ (8007ecc <vTaskMissedYield+0x14>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	24000eb0 	.word	0x24000eb0

08007ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ed8:	f000 f852 	bl	8007f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007edc:	4b06      	ldr	r3, [pc, #24]	@ (8007ef8 <prvIdleTask+0x28>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d9f9      	bls.n	8007ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ee4:	4b05      	ldr	r3, [pc, #20]	@ (8007efc <prvIdleTask+0x2c>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ef4:	e7f0      	b.n	8007ed8 <prvIdleTask+0x8>
 8007ef6:	bf00      	nop
 8007ef8:	240009cc 	.word	0x240009cc
 8007efc:	e000ed04 	.word	0xe000ed04

08007f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f06:	2300      	movs	r3, #0
 8007f08:	607b      	str	r3, [r7, #4]
 8007f0a:	e00c      	b.n	8007f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4a12      	ldr	r2, [pc, #72]	@ (8007f60 <prvInitialiseTaskLists+0x60>)
 8007f18:	4413      	add	r3, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fc56 	bl	80067cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3301      	adds	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b37      	cmp	r3, #55	@ 0x37
 8007f2a:	d9ef      	bls.n	8007f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f2c:	480d      	ldr	r0, [pc, #52]	@ (8007f64 <prvInitialiseTaskLists+0x64>)
 8007f2e:	f7fe fc4d 	bl	80067cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f32:	480d      	ldr	r0, [pc, #52]	@ (8007f68 <prvInitialiseTaskLists+0x68>)
 8007f34:	f7fe fc4a 	bl	80067cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f38:	480c      	ldr	r0, [pc, #48]	@ (8007f6c <prvInitialiseTaskLists+0x6c>)
 8007f3a:	f7fe fc47 	bl	80067cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f3e:	480c      	ldr	r0, [pc, #48]	@ (8007f70 <prvInitialiseTaskLists+0x70>)
 8007f40:	f7fe fc44 	bl	80067cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f44:	480b      	ldr	r0, [pc, #44]	@ (8007f74 <prvInitialiseTaskLists+0x74>)
 8007f46:	f7fe fc41 	bl	80067cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f78 <prvInitialiseTaskLists+0x78>)
 8007f4c:	4a05      	ldr	r2, [pc, #20]	@ (8007f64 <prvInitialiseTaskLists+0x64>)
 8007f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f50:	4b0a      	ldr	r3, [pc, #40]	@ (8007f7c <prvInitialiseTaskLists+0x7c>)
 8007f52:	4a05      	ldr	r2, [pc, #20]	@ (8007f68 <prvInitialiseTaskLists+0x68>)
 8007f54:	601a      	str	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	240009cc 	.word	0x240009cc
 8007f64:	24000e2c 	.word	0x24000e2c
 8007f68:	24000e40 	.word	0x24000e40
 8007f6c:	24000e5c 	.word	0x24000e5c
 8007f70:	24000e70 	.word	0x24000e70
 8007f74:	24000e88 	.word	0x24000e88
 8007f78:	24000e54 	.word	0x24000e54
 8007f7c:	24000e58 	.word	0x24000e58

08007f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f86:	e019      	b.n	8007fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f88:	f000 fde6 	bl	8008b58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8c:	4b10      	ldr	r3, [pc, #64]	@ (8007fd0 <prvCheckTasksWaitingTermination+0x50>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fca1 	bl	80068e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <prvCheckTasksWaitingTermination+0x54>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd4 <prvCheckTasksWaitingTermination+0x54>)
 8007fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <prvCheckTasksWaitingTermination+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd8 <prvCheckTasksWaitingTermination+0x58>)
 8007fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fb2:	f000 fe03 	bl	8008bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f810 	bl	8007fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fbc:	4b06      	ldr	r3, [pc, #24]	@ (8007fd8 <prvCheckTasksWaitingTermination+0x58>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e1      	bne.n	8007f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	24000e70 	.word	0x24000e70
 8007fd4:	24000e9c 	.word	0x24000e9c
 8007fd8:	24000e84 	.word	0x24000e84

08007fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d108      	bne.n	8008000 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 ffa0 	bl	8008f38 <vPortFree>
				vPortFree( pxTCB );
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 ff9d 	bl	8008f38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ffe:	e019      	b.n	8008034 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008006:	2b01      	cmp	r3, #1
 8008008:	d103      	bne.n	8008012 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 ff94 	bl	8008f38 <vPortFree>
	}
 8008010:	e010      	b.n	8008034 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008018:	2b02      	cmp	r3, #2
 800801a:	d00b      	beq.n	8008034 <prvDeleteTCB+0x58>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <prvDeleteTCB+0x54>
	}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008042:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <prvResetNextTaskUnblockTime+0x38>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800804c:	4b0a      	ldr	r3, [pc, #40]	@ (8008078 <prvResetNextTaskUnblockTime+0x3c>)
 800804e:	f04f 32ff 	mov.w	r2, #4294967295
 8008052:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008054:	e008      	b.n	8008068 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008056:	4b07      	ldr	r3, [pc, #28]	@ (8008074 <prvResetNextTaskUnblockTime+0x38>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	4a04      	ldr	r2, [pc, #16]	@ (8008078 <prvResetNextTaskUnblockTime+0x3c>)
 8008066:	6013      	str	r3, [r2, #0]
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	24000e54 	.word	0x24000e54
 8008078:	24000ebc 	.word	0x24000ebc

0800807c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008082:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <xTaskGetSchedulerState+0x34>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800808a:	2301      	movs	r3, #1
 800808c:	607b      	str	r3, [r7, #4]
 800808e:	e008      	b.n	80080a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008090:	4b08      	ldr	r3, [pc, #32]	@ (80080b4 <xTaskGetSchedulerState+0x38>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008098:	2302      	movs	r3, #2
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e001      	b.n	80080a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080a2:	687b      	ldr	r3, [r7, #4]
	}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	24000ea8 	.word	0x24000ea8
 80080b4:	24000ec4 	.word	0x24000ec4

080080b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d058      	beq.n	8008180 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080ce:	4b2f      	ldr	r3, [pc, #188]	@ (800818c <xTaskPriorityDisinherit+0xd4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d00b      	beq.n	80080f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	60fb      	str	r3, [r7, #12]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	60bb      	str	r3, [r7, #8]
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008114:	1e5a      	subs	r2, r3, #1
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008122:	429a      	cmp	r2, r3
 8008124:	d02c      	beq.n	8008180 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812a:	2b00      	cmp	r3, #0
 800812c:	d128      	bne.n	8008180 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	3304      	adds	r3, #4
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe fbd4 	bl	80068e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008150:	4b0f      	ldr	r3, [pc, #60]	@ (8008190 <xTaskPriorityDisinherit+0xd8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d903      	bls.n	8008160 <xTaskPriorityDisinherit+0xa8>
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	4a0c      	ldr	r2, [pc, #48]	@ (8008190 <xTaskPriorityDisinherit+0xd8>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4a09      	ldr	r2, [pc, #36]	@ (8008194 <xTaskPriorityDisinherit+0xdc>)
 800816e:	441a      	add	r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7fe fb55 	bl	8006826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008180:	697b      	ldr	r3, [r7, #20]
	}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	240009c8 	.word	0x240009c8
 8008190:	24000ea4 	.word	0x24000ea4
 8008194:	240009cc 	.word	0x240009cc

08008198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081a2:	4b21      	ldr	r3, [pc, #132]	@ (8008228 <prvAddCurrentTaskToDelayedList+0x90>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a8:	4b20      	ldr	r3, [pc, #128]	@ (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fb96 	bl	80068e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d10a      	bne.n	80081d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c2:	4b1a      	ldr	r3, [pc, #104]	@ (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4619      	mov	r1, r3
 80081ca:	4819      	ldr	r0, [pc, #100]	@ (8008230 <prvAddCurrentTaskToDelayedList+0x98>)
 80081cc:	f7fe fb2b 	bl	8006826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d0:	e026      	b.n	8008220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081da:	4b14      	ldr	r3, [pc, #80]	@ (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d209      	bcs.n	80081fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ea:	4b12      	ldr	r3, [pc, #72]	@ (8008234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b0f      	ldr	r3, [pc, #60]	@ (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f7fe fb39 	bl	800686e <vListInsert>
}
 80081fc:	e010      	b.n	8008220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <prvAddCurrentTaskToDelayedList+0x94>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3304      	adds	r3, #4
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f7fe fb2f 	bl	800686e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008210:	4b0a      	ldr	r3, [pc, #40]	@ (800823c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d202      	bcs.n	8008220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800821a:	4a08      	ldr	r2, [pc, #32]	@ (800823c <prvAddCurrentTaskToDelayedList+0xa4>)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	6013      	str	r3, [r2, #0]
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	24000ea0 	.word	0x24000ea0
 800822c:	240009c8 	.word	0x240009c8
 8008230:	24000e88 	.word	0x24000e88
 8008234:	24000e58 	.word	0x24000e58
 8008238:	24000e54 	.word	0x24000e54
 800823c:	24000ebc 	.word	0x24000ebc

08008240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	@ 0x28
 8008244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800824a:	f000 fb13 	bl	8008874 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800824e:	4b1d      	ldr	r3, [pc, #116]	@ (80082c4 <xTimerCreateTimerTask+0x84>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d021      	beq.n	800829a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800825e:	1d3a      	adds	r2, r7, #4
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	f107 030c 	add.w	r3, r7, #12
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fa95 	bl	8006798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	9202      	str	r2, [sp, #8]
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	2302      	movs	r3, #2
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	2300      	movs	r3, #0
 800827e:	460a      	mov	r2, r1
 8008280:	4911      	ldr	r1, [pc, #68]	@ (80082c8 <xTimerCreateTimerTask+0x88>)
 8008282:	4812      	ldr	r0, [pc, #72]	@ (80082cc <xTimerCreateTimerTask+0x8c>)
 8008284:	f7ff f850 	bl	8007328 <xTaskCreateStatic>
 8008288:	4603      	mov	r3, r0
 800828a:	4a11      	ldr	r2, [pc, #68]	@ (80082d0 <xTimerCreateTimerTask+0x90>)
 800828c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800828e:	4b10      	ldr	r3, [pc, #64]	@ (80082d0 <xTimerCreateTimerTask+0x90>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008296:	2301      	movs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	613b      	str	r3, [r7, #16]
}
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
 80082b6:	e7fd      	b.n	80082b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082b8:	697b      	ldr	r3, [r7, #20]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	24000ef8 	.word	0x24000ef8
 80082c8:	08009238 	.word	0x08009238
 80082cc:	0800840d 	.word	0x0800840d
 80082d0:	24000efc 	.word	0x24000efc

080082d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	@ 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <xTimerGenericCommand+0x30>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	623b      	str	r3, [r7, #32]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008304:	4b19      	ldr	r3, [pc, #100]	@ (800836c <xTimerGenericCommand+0x98>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d02a      	beq.n	8008362 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b05      	cmp	r3, #5
 800831c:	dc18      	bgt.n	8008350 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800831e:	f7ff fead 	bl	800807c <xTaskGetSchedulerState>
 8008322:	4603      	mov	r3, r0
 8008324:	2b02      	cmp	r3, #2
 8008326:	d109      	bne.n	800833c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008328:	4b10      	ldr	r3, [pc, #64]	@ (800836c <xTimerGenericCommand+0x98>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	f107 0110 	add.w	r1, r7, #16
 8008330:	2300      	movs	r3, #0
 8008332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008334:	f7fe fc08 	bl	8006b48 <xQueueGenericSend>
 8008338:	6278      	str	r0, [r7, #36]	@ 0x24
 800833a:	e012      	b.n	8008362 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800833c:	4b0b      	ldr	r3, [pc, #44]	@ (800836c <xTimerGenericCommand+0x98>)
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	f107 0110 	add.w	r1, r7, #16
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	f7fe fbfe 	bl	8006b48 <xQueueGenericSend>
 800834c:	6278      	str	r0, [r7, #36]	@ 0x24
 800834e:	e008      	b.n	8008362 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008350:	4b06      	ldr	r3, [pc, #24]	@ (800836c <xTimerGenericCommand+0x98>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	f107 0110 	add.w	r1, r7, #16
 8008358:	2300      	movs	r3, #0
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	f7fe fcf6 	bl	8006d4c <xQueueGenericSendFromISR>
 8008360:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008364:	4618      	mov	r0, r3
 8008366:	3728      	adds	r7, #40	@ 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	24000ef8 	.word	0x24000ef8

08008370 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837a:	4b23      	ldr	r3, [pc, #140]	@ (8008408 <prvProcessExpiredTimer+0x98>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe faa9 	bl	80068e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d023      	beq.n	80083e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	18d1      	adds	r1, r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	6978      	ldr	r0, [r7, #20]
 80083aa:	f000 f8d5 	bl	8008558 <prvInsertTimerInActiveList>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d020      	beq.n	80083f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2300      	movs	r3, #0
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	2100      	movs	r1, #0
 80083be:	6978      	ldr	r0, [r7, #20]
 80083c0:	f7ff ff88 	bl	80082d4 <xTimerGenericCommand>
 80083c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d114      	bne.n	80083f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60fb      	str	r3, [r7, #12]
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	e7fd      	b.n	80083e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	6978      	ldr	r0, [r7, #20]
 80083fc:	4798      	blx	r3
}
 80083fe:	bf00      	nop
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	24000ef0 	.word	0x24000ef0

0800840c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008414:	f107 0308 	add.w	r3, r7, #8
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f859 	bl	80084d0 <prvGetNextExpireTime>
 800841e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4619      	mov	r1, r3
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f805 	bl	8008434 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800842a:	f000 f8d7 	bl	80085dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800842e:	bf00      	nop
 8008430:	e7f0      	b.n	8008414 <prvTimerTask+0x8>
	...

08008434 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800843e:	f7ff fa37 	bl	80078b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f866 	bl	8008518 <prvSampleTimeNow>
 800844c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d130      	bne.n	80084b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <prvProcessTimerOrBlockTask+0x3c>
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	429a      	cmp	r2, r3
 8008460:	d806      	bhi.n	8008470 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008462:	f7ff fa33 	bl	80078cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff ff81 	bl	8008370 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800846e:	e024      	b.n	80084ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d008      	beq.n	8008488 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008476:	4b13      	ldr	r3, [pc, #76]	@ (80084c4 <prvProcessTimerOrBlockTask+0x90>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <prvProcessTimerOrBlockTask+0x50>
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <prvProcessTimerOrBlockTask+0x52>
 8008484:	2300      	movs	r3, #0
 8008486:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008488:	4b0f      	ldr	r3, [pc, #60]	@ (80084c8 <prvProcessTimerOrBlockTask+0x94>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4619      	mov	r1, r3
 8008496:	f7fe ff13 	bl	80072c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800849a:	f7ff fa17 	bl	80078cc <xTaskResumeAll>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084a4:	4b09      	ldr	r3, [pc, #36]	@ (80084cc <prvProcessTimerOrBlockTask+0x98>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
}
 80084b4:	e001      	b.n	80084ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084b6:	f7ff fa09 	bl	80078cc <xTaskResumeAll>
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	24000ef4 	.word	0x24000ef4
 80084c8:	24000ef8 	.word	0x24000ef8
 80084cc:	e000ed04 	.word	0xe000ed04

080084d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008514 <prvGetNextExpireTime+0x44>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <prvGetNextExpireTime+0x16>
 80084e2:	2201      	movs	r2, #1
 80084e4:	e000      	b.n	80084e8 <prvGetNextExpireTime+0x18>
 80084e6:	2200      	movs	r2, #0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d105      	bne.n	8008500 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084f4:	4b07      	ldr	r3, [pc, #28]	@ (8008514 <prvGetNextExpireTime+0x44>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	e001      	b.n	8008504 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008504:	68fb      	ldr	r3, [r7, #12]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	24000ef0 	.word	0x24000ef0

08008518 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008520:	f7ff fa72 	bl	8007a08 <xTaskGetTickCount>
 8008524:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008526:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <prvSampleTimeNow+0x3c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	429a      	cmp	r2, r3
 800852e:	d205      	bcs.n	800853c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008530:	f000 f93a 	bl	80087a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	e002      	b.n	8008542 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008542:	4a04      	ldr	r2, [pc, #16]	@ (8008554 <prvSampleTimeNow+0x3c>)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	24000f00 	.word	0x24000f00

08008558 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d812      	bhi.n	80085a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	429a      	cmp	r2, r3
 800858a:	d302      	bcc.n	8008592 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e01b      	b.n	80085ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <prvInsertTimerInActiveList+0x7c>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3304      	adds	r3, #4
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f7fe f966 	bl	800686e <vListInsert>
 80085a2:	e012      	b.n	80085ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d206      	bcs.n	80085ba <prvInsertTimerInActiveList+0x62>
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d302      	bcc.n	80085ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e007      	b.n	80085ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085ba:	4b07      	ldr	r3, [pc, #28]	@ (80085d8 <prvInsertTimerInActiveList+0x80>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f7fe f952 	bl	800686e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085ca:	697b      	ldr	r3, [r7, #20]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	24000ef4 	.word	0x24000ef4
 80085d8:	24000ef0 	.word	0x24000ef0

080085dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08e      	sub	sp, #56	@ 0x38
 80085e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085e2:	e0ce      	b.n	8008782 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	da19      	bge.n	800861e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	3304      	adds	r3, #4
 80085ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10b      	bne.n	800860e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	61fb      	str	r3, [r7, #28]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800860e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008614:	6850      	ldr	r0, [r2, #4]
 8008616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008618:	6892      	ldr	r2, [r2, #8]
 800861a:	4611      	mov	r1, r2
 800861c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f2c0 80ae 	blt.w	8008782 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d004      	beq.n	800863c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe f952 	bl	80068e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800863c:	463b      	mov	r3, r7
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff ff6a 	bl	8008518 <prvSampleTimeNow>
 8008644:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b09      	cmp	r3, #9
 800864a:	f200 8097 	bhi.w	800877c <prvProcessReceivedCommands+0x1a0>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <prvProcessReceivedCommands+0x78>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	0800867d 	.word	0x0800867d
 8008658:	0800867d 	.word	0x0800867d
 800865c:	0800867d 	.word	0x0800867d
 8008660:	080086f3 	.word	0x080086f3
 8008664:	08008707 	.word	0x08008707
 8008668:	08008753 	.word	0x08008753
 800866c:	0800867d 	.word	0x0800867d
 8008670:	0800867d 	.word	0x0800867d
 8008674:	080086f3 	.word	0x080086f3
 8008678:	08008707 	.word	0x08008707
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	b2da      	uxtb	r2, r3
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	18d1      	adds	r1, r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800869c:	f7ff ff5c 	bl	8008558 <prvInsertTimerInActiveList>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d06c      	beq.n	8008780 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d061      	beq.n	8008780 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	441a      	add	r2, r3
 80086c4:	2300      	movs	r3, #0
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2300      	movs	r3, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ce:	f7ff fe01 	bl	80082d4 <xTimerGenericCommand>
 80086d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d152      	bne.n	8008780 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	61bb      	str	r3, [r7, #24]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008704:	e03d      	b.n	8008782 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	b2da      	uxtb	r2, r3
 8008712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008714:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10b      	bne.n	800873e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	617b      	str	r3, [r7, #20]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	18d1      	adds	r1, r2, r3
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800874c:	f7ff ff04 	bl	8008558 <prvInsertTimerInActiveList>
					break;
 8008750:	e017      	b.n	8008782 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008762:	f000 fbe9 	bl	8008f38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008766:	e00c      	b.n	8008782 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800877a:	e002      	b.n	8008782 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <prvProcessReceivedCommands+0x1a6>
					break;
 8008780:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008782:	4b08      	ldr	r3, [pc, #32]	@ (80087a4 <prvProcessReceivedCommands+0x1c8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	1d39      	adds	r1, r7, #4
 8008788:	2200      	movs	r2, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f7fe fb7c 	bl	8006e88 <xQueueReceive>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	f47f af26 	bne.w	80085e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3730      	adds	r7, #48	@ 0x30
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	24000ef8 	.word	0x24000ef8

080087a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087ae:	e049      	b.n	8008844 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087b0:	4b2e      	ldr	r3, [pc, #184]	@ (800886c <prvSwitchTimerLists+0xc4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ba:	4b2c      	ldr	r3, [pc, #176]	@ (800886c <prvSwitchTimerLists+0xc4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe f889 	bl	80068e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02f      	beq.n	8008844 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4413      	add	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d90e      	bls.n	8008814 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008802:	4b1a      	ldr	r3, [pc, #104]	@ (800886c <prvSwitchTimerLists+0xc4>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3304      	adds	r3, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7fe f82e 	bl	800686e <vListInsert>
 8008812:	e017      	b.n	8008844 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008814:	2300      	movs	r3, #0
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	2300      	movs	r3, #0
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	2100      	movs	r1, #0
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f7ff fd58 	bl	80082d4 <xTimerGenericCommand>
 8008824:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10b      	bne.n	8008844 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	603b      	str	r3, [r7, #0]
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008844:	4b09      	ldr	r3, [pc, #36]	@ (800886c <prvSwitchTimerLists+0xc4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1b0      	bne.n	80087b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800884e:	4b07      	ldr	r3, [pc, #28]	@ (800886c <prvSwitchTimerLists+0xc4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008854:	4b06      	ldr	r3, [pc, #24]	@ (8008870 <prvSwitchTimerLists+0xc8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a04      	ldr	r2, [pc, #16]	@ (800886c <prvSwitchTimerLists+0xc4>)
 800885a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800885c:	4a04      	ldr	r2, [pc, #16]	@ (8008870 <prvSwitchTimerLists+0xc8>)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	6013      	str	r3, [r2, #0]
}
 8008862:	bf00      	nop
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	24000ef0 	.word	0x24000ef0
 8008870:	24000ef4 	.word	0x24000ef4

08008874 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800887a:	f000 f96d 	bl	8008b58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800887e:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <prvCheckForValidListAndQueue+0x60>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d120      	bne.n	80088c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008886:	4814      	ldr	r0, [pc, #80]	@ (80088d8 <prvCheckForValidListAndQueue+0x64>)
 8008888:	f7fd ffa0 	bl	80067cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800888c:	4813      	ldr	r0, [pc, #76]	@ (80088dc <prvCheckForValidListAndQueue+0x68>)
 800888e:	f7fd ff9d 	bl	80067cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008892:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <prvCheckForValidListAndQueue+0x6c>)
 8008894:	4a10      	ldr	r2, [pc, #64]	@ (80088d8 <prvCheckForValidListAndQueue+0x64>)
 8008896:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008898:	4b12      	ldr	r3, [pc, #72]	@ (80088e4 <prvCheckForValidListAndQueue+0x70>)
 800889a:	4a10      	ldr	r2, [pc, #64]	@ (80088dc <prvCheckForValidListAndQueue+0x68>)
 800889c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800889e:	2300      	movs	r3, #0
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4b11      	ldr	r3, [pc, #68]	@ (80088e8 <prvCheckForValidListAndQueue+0x74>)
 80088a4:	4a11      	ldr	r2, [pc, #68]	@ (80088ec <prvCheckForValidListAndQueue+0x78>)
 80088a6:	2110      	movs	r1, #16
 80088a8:	200a      	movs	r0, #10
 80088aa:	f7fe f8ad 	bl	8006a08 <xQueueGenericCreateStatic>
 80088ae:	4603      	mov	r3, r0
 80088b0:	4a08      	ldr	r2, [pc, #32]	@ (80088d4 <prvCheckForValidListAndQueue+0x60>)
 80088b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088b4:	4b07      	ldr	r3, [pc, #28]	@ (80088d4 <prvCheckForValidListAndQueue+0x60>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <prvCheckForValidListAndQueue+0x60>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	490b      	ldr	r1, [pc, #44]	@ (80088f0 <prvCheckForValidListAndQueue+0x7c>)
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fcd2 	bl	800726c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088c8:	f000 f978 	bl	8008bbc <vPortExitCritical>
}
 80088cc:	bf00      	nop
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	24000ef8 	.word	0x24000ef8
 80088d8:	24000ec8 	.word	0x24000ec8
 80088dc:	24000edc 	.word	0x24000edc
 80088e0:	24000ef0 	.word	0x24000ef0
 80088e4:	24000ef4 	.word	0x24000ef4
 80088e8:	24000fa4 	.word	0x24000fa4
 80088ec:	24000f04 	.word	0x24000f04
 80088f0:	08009240 	.word	0x08009240

080088f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3b04      	subs	r3, #4
 8008904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800890c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3b04      	subs	r3, #4
 8008912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f023 0201 	bic.w	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3b04      	subs	r3, #4
 8008922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008924:	4a0c      	ldr	r2, [pc, #48]	@ (8008958 <pxPortInitialiseStack+0x64>)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3b14      	subs	r3, #20
 800892e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3b04      	subs	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f06f 0202 	mvn.w	r2, #2
 8008942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3b20      	subs	r3, #32
 8008948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	0800895d 	.word	0x0800895d

0800895c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008966:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <prvTaskExitError+0x58>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d00b      	beq.n	8008988 <prvTaskExitError+0x2c>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <prvTaskExitError+0x28>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60bb      	str	r3, [r7, #8]
}
 800899a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800899c:	bf00      	nop
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0fc      	beq.n	800899e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	24000014 	.word	0x24000014
	...

080089c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <pxCurrentTCBConst2>)
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	f380 8809 	msr	PSP, r0
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	4770      	bx	lr
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst2>:
 80089e0:	240009c8 	.word	0x240009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089e8:	4808      	ldr	r0, [pc, #32]	@ (8008a0c <prvPortStartFirstTask+0x24>)
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f380 8808 	msr	MSP, r0
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8814 	msr	CONTROL, r0
 80089fa:	b662      	cpsie	i
 80089fc:	b661      	cpsie	f
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	df00      	svc	0
 8008a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a0a:	bf00      	nop
 8008a0c:	e000ed08 	.word	0xe000ed08

08008a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a16:	4b47      	ldr	r3, [pc, #284]	@ (8008b34 <xPortStartScheduler+0x124>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a47      	ldr	r2, [pc, #284]	@ (8008b38 <xPortStartScheduler+0x128>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d10b      	bne.n	8008a38 <xPortStartScheduler+0x28>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	613b      	str	r3, [r7, #16]
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a38:	4b3e      	ldr	r3, [pc, #248]	@ (8008b34 <xPortStartScheduler+0x124>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b3c <xPortStartScheduler+0x12c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d10b      	bne.n	8008a5a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	60fb      	str	r3, [r7, #12]
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	e7fd      	b.n	8008a56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a5a:	4b39      	ldr	r3, [pc, #228]	@ (8008b40 <xPortStartScheduler+0x130>)
 8008a5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	22ff      	movs	r2, #255	@ 0xff
 8008a6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	4b31      	ldr	r3, [pc, #196]	@ (8008b44 <xPortStartScheduler+0x134>)
 8008a80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a82:	4b31      	ldr	r3, [pc, #196]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008a84:	2207      	movs	r2, #7
 8008a86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a88:	e009      	b.n	8008a9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	4a2d      	ldr	r2, [pc, #180]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008a92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa6:	2b80      	cmp	r3, #128	@ 0x80
 8008aa8:	d0ef      	beq.n	8008a8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aaa:	4b27      	ldr	r3, [pc, #156]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f1c3 0307 	rsb	r3, r3, #7
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d00b      	beq.n	8008ace <xPortStartScheduler+0xbe>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60bb      	str	r3, [r7, #8]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ace:	4b1e      	ldr	r3, [pc, #120]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ae0:	4a19      	ldr	r2, [pc, #100]	@ (8008b48 <xPortStartScheduler+0x138>)
 8008ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008aec:	4b17      	ldr	r3, [pc, #92]	@ (8008b4c <xPortStartScheduler+0x13c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a16      	ldr	r2, [pc, #88]	@ (8008b4c <xPortStartScheduler+0x13c>)
 8008af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008af8:	4b14      	ldr	r3, [pc, #80]	@ (8008b4c <xPortStartScheduler+0x13c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a13      	ldr	r2, [pc, #76]	@ (8008b4c <xPortStartScheduler+0x13c>)
 8008afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b04:	f000 f8da 	bl	8008cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b08:	4b11      	ldr	r3, [pc, #68]	@ (8008b50 <xPortStartScheduler+0x140>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b0e:	f000 f8f9 	bl	8008d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b12:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <xPortStartScheduler+0x144>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a0f      	ldr	r2, [pc, #60]	@ (8008b54 <xPortStartScheduler+0x144>)
 8008b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b1e:	f7ff ff63 	bl	80089e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b22:	f7ff f83b 	bl	8007b9c <vTaskSwitchContext>
	prvTaskExitError();
 8008b26:	f7ff ff19 	bl	800895c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	e000ed00 	.word	0xe000ed00
 8008b38:	410fc271 	.word	0x410fc271
 8008b3c:	410fc270 	.word	0x410fc270
 8008b40:	e000e400 	.word	0xe000e400
 8008b44:	24000ff4 	.word	0x24000ff4
 8008b48:	24000ff8 	.word	0x24000ff8
 8008b4c:	e000ed20 	.word	0xe000ed20
 8008b50:	24000014 	.word	0x24000014
 8008b54:	e000ef34 	.word	0xe000ef34

08008b58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b72:	4b10      	ldr	r3, [pc, #64]	@ (8008bb4 <vPortEnterCritical+0x5c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb4 <vPortEnterCritical+0x5c>)
 8008b7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb4 <vPortEnterCritical+0x5c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d110      	bne.n	8008ba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b84:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <vPortEnterCritical+0x60>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	603b      	str	r3, [r7, #0]
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	e7fd      	b.n	8008ba2 <vPortEnterCritical+0x4a>
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	24000014 	.word	0x24000014
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <vPortExitCritical+0x50>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <vPortExitCritical+0x26>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008be2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <vPortExitCritical+0x50>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	4a08      	ldr	r2, [pc, #32]	@ (8008c0c <vPortExitCritical+0x50>)
 8008bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bec:	4b07      	ldr	r3, [pc, #28]	@ (8008c0c <vPortExitCritical+0x50>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <vPortExitCritical+0x44>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	f383 8811 	msr	BASEPRI, r3
}
 8008bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	24000014 	.word	0x24000014

08008c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c10:	f3ef 8009 	mrs	r0, PSP
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4b15      	ldr	r3, [pc, #84]	@ (8008c70 <pxCurrentTCBConst>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f01e 0f10 	tst.w	lr, #16
 8008c20:	bf08      	it	eq
 8008c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	6010      	str	r0, [r2, #0]
 8008c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c34:	f380 8811 	msr	BASEPRI, r0
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f7fe ffac 	bl	8007b9c <vTaskSwitchContext>
 8008c44:	f04f 0000 	mov.w	r0, #0
 8008c48:	f380 8811 	msr	BASEPRI, r0
 8008c4c:	bc09      	pop	{r0, r3}
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	6808      	ldr	r0, [r1, #0]
 8008c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c56:	f01e 0f10 	tst.w	lr, #16
 8008c5a:	bf08      	it	eq
 8008c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c60:	f380 8809 	msr	PSP, r0
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst>:
 8008c70:	240009c8 	.word	0x240009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c92:	f7fe fec9 	bl	8007a28 <xTaskIncrementTick>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <xPortSysTickHandler+0x40>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	f383 8811 	msr	BASEPRI, r3
}
 8008cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf0 <vPortSetupTimerInterrupt+0x34>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <vPortSetupTimerInterrupt+0x38>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf8 <vPortSetupTimerInterrupt+0x3c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8008cfc <vPortSetupTimerInterrupt+0x40>)
 8008cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd6:	099b      	lsrs	r3, r3, #6
 8008cd8:	4a09      	ldr	r2, [pc, #36]	@ (8008d00 <vPortSetupTimerInterrupt+0x44>)
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cde:	4b04      	ldr	r3, [pc, #16]	@ (8008cf0 <vPortSetupTimerInterrupt+0x34>)
 8008ce0:	2207      	movs	r2, #7
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	e000e010 	.word	0xe000e010
 8008cf4:	e000e018 	.word	0xe000e018
 8008cf8:	24000004 	.word	0x24000004
 8008cfc:	10624dd3 	.word	0x10624dd3
 8008d00:	e000e014 	.word	0xe000e014

08008d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d14 <vPortEnableVFP+0x10>
 8008d08:	6801      	ldr	r1, [r0, #0]
 8008d0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d0e:	6001      	str	r1, [r0, #0]
 8008d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d12:	bf00      	nop
 8008d14:	e000ed88 	.word	0xe000ed88

08008d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d1e:	f3ef 8305 	mrs	r3, IPSR
 8008d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b0f      	cmp	r3, #15
 8008d28:	d915      	bls.n	8008d56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d2a:	4a18      	ldr	r2, [pc, #96]	@ (8008d8c <vPortValidateInterruptPriority+0x74>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d34:	4b16      	ldr	r3, [pc, #88]	@ (8008d90 <vPortValidateInterruptPriority+0x78>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	7afa      	ldrb	r2, [r7, #11]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d20b      	bcs.n	8008d56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
}
 8008d50:	bf00      	nop
 8008d52:	bf00      	nop
 8008d54:	e7fd      	b.n	8008d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d56:	4b0f      	ldr	r3, [pc, #60]	@ (8008d94 <vPortValidateInterruptPriority+0x7c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d98 <vPortValidateInterruptPriority+0x80>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d90b      	bls.n	8008d7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	603b      	str	r3, [r7, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <vPortValidateInterruptPriority+0x62>
	}
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	e000e3f0 	.word	0xe000e3f0
 8008d90:	24000ff4 	.word	0x24000ff4
 8008d94:	e000ed0c 	.word	0xe000ed0c
 8008d98:	24000ff8 	.word	0x24000ff8

08008d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	@ 0x28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008da8:	f7fe fd82 	bl	80078b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dac:	4b5c      	ldr	r3, [pc, #368]	@ (8008f20 <pvPortMalloc+0x184>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008db4:	f000 f924 	bl	8009000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008db8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f24 <pvPortMalloc+0x188>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 8095 	bne.w	8008ef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01e      	beq.n	8008e0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008dcc:	2208      	movs	r2, #8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d015      	beq.n	8008e0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f023 0307 	bic.w	r3, r3, #7
 8008de4:	3308      	adds	r3, #8
 8008de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <pvPortMalloc+0x6e>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	617b      	str	r3, [r7, #20]
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	e7fd      	b.n	8008e06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d06f      	beq.n	8008ef0 <pvPortMalloc+0x154>
 8008e10:	4b45      	ldr	r3, [pc, #276]	@ (8008f28 <pvPortMalloc+0x18c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d86a      	bhi.n	8008ef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e1a:	4b44      	ldr	r3, [pc, #272]	@ (8008f2c <pvPortMalloc+0x190>)
 8008e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e1e:	4b43      	ldr	r3, [pc, #268]	@ (8008f2c <pvPortMalloc+0x190>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e24:	e004      	b.n	8008e30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d903      	bls.n	8008e42 <pvPortMalloc+0xa6>
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f1      	bne.n	8008e26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e42:	4b37      	ldr	r3, [pc, #220]	@ (8008f20 <pvPortMalloc+0x184>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d051      	beq.n	8008ef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2208      	movs	r2, #8
 8008e52:	4413      	add	r3, r2
 8008e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	1ad2      	subs	r2, r2, r3
 8008e66:	2308      	movs	r3, #8
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d920      	bls.n	8008eb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4413      	add	r3, r2
 8008e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <pvPortMalloc+0xfc>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	613b      	str	r3, [r7, #16]
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eaa:	69b8      	ldr	r0, [r7, #24]
 8008eac:	f000 f90a 	bl	80090c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f28 <pvPortMalloc+0x18c>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	4a1b      	ldr	r2, [pc, #108]	@ (8008f28 <pvPortMalloc+0x18c>)
 8008ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8008f28 <pvPortMalloc+0x18c>)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f30 <pvPortMalloc+0x194>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d203      	bcs.n	8008ed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008eca:	4b17      	ldr	r3, [pc, #92]	@ (8008f28 <pvPortMalloc+0x18c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a18      	ldr	r2, [pc, #96]	@ (8008f30 <pvPortMalloc+0x194>)
 8008ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4b13      	ldr	r3, [pc, #76]	@ (8008f24 <pvPortMalloc+0x188>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ee6:	4b13      	ldr	r3, [pc, #76]	@ (8008f34 <pvPortMalloc+0x198>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	4a11      	ldr	r2, [pc, #68]	@ (8008f34 <pvPortMalloc+0x198>)
 8008eee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ef0:	f7fe fcec 	bl	80078cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <pvPortMalloc+0x17a>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60fb      	str	r3, [r7, #12]
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <pvPortMalloc+0x176>
	return pvReturn;
 8008f16:	69fb      	ldr	r3, [r7, #28]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3728      	adds	r7, #40	@ 0x28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	24004c04 	.word	0x24004c04
 8008f24:	24004c18 	.word	0x24004c18
 8008f28:	24004c08 	.word	0x24004c08
 8008f2c:	24004bfc 	.word	0x24004bfc
 8008f30:	24004c0c 	.word	0x24004c0c
 8008f34:	24004c10 	.word	0x24004c10

08008f38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d04f      	beq.n	8008fea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f4a:	2308      	movs	r3, #8
 8008f4c:	425b      	negs	r3, r3
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	4b25      	ldr	r3, [pc, #148]	@ (8008ff4 <vPortFree+0xbc>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4013      	ands	r3, r2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10b      	bne.n	8008f7e <vPortFree+0x46>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <vPortFree+0x66>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60bb      	str	r3, [r7, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	4b14      	ldr	r3, [pc, #80]	@ (8008ff4 <vPortFree+0xbc>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01e      	beq.n	8008fea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d11a      	bne.n	8008fea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff4 <vPortFree+0xbc>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	401a      	ands	r2, r3
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fc4:	f7fe fc74 	bl	80078b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff8 <vPortFree+0xc0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	4a09      	ldr	r2, [pc, #36]	@ (8008ff8 <vPortFree+0xc0>)
 8008fd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fd6:	6938      	ldr	r0, [r7, #16]
 8008fd8:	f000 f874 	bl	80090c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fdc:	4b07      	ldr	r3, [pc, #28]	@ (8008ffc <vPortFree+0xc4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	4a06      	ldr	r2, [pc, #24]	@ (8008ffc <vPortFree+0xc4>)
 8008fe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008fe6:	f7fe fc71 	bl	80078cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fea:	bf00      	nop
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	24004c18 	.word	0x24004c18
 8008ff8:	24004c08 	.word	0x24004c08
 8008ffc:	24004c14 	.word	0x24004c14

08009000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009006:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800900a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800900c:	4b27      	ldr	r3, [pc, #156]	@ (80090ac <prvHeapInit+0xac>)
 800900e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00c      	beq.n	8009034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3307      	adds	r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0307 	bic.w	r3, r3, #7
 8009026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	4a1f      	ldr	r2, [pc, #124]	@ (80090ac <prvHeapInit+0xac>)
 8009030:	4413      	add	r3, r2
 8009032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009038:	4a1d      	ldr	r2, [pc, #116]	@ (80090b0 <prvHeapInit+0xb0>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800903e:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <prvHeapInit+0xb0>)
 8009040:	2200      	movs	r2, #0
 8009042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	4413      	add	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800904c:	2208      	movs	r2, #8
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0307 	bic.w	r3, r3, #7
 800905a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a15      	ldr	r2, [pc, #84]	@ (80090b4 <prvHeapInit+0xb4>)
 8009060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009062:	4b14      	ldr	r3, [pc, #80]	@ (80090b4 <prvHeapInit+0xb4>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2200      	movs	r2, #0
 8009068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800906a:	4b12      	ldr	r3, [pc, #72]	@ (80090b4 <prvHeapInit+0xb4>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009080:	4b0c      	ldr	r3, [pc, #48]	@ (80090b4 <prvHeapInit+0xb4>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	4a0a      	ldr	r2, [pc, #40]	@ (80090b8 <prvHeapInit+0xb8>)
 800908e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	4a09      	ldr	r2, [pc, #36]	@ (80090bc <prvHeapInit+0xbc>)
 8009096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009098:	4b09      	ldr	r3, [pc, #36]	@ (80090c0 <prvHeapInit+0xc0>)
 800909a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800909e:	601a      	str	r2, [r3, #0]
}
 80090a0:	bf00      	nop
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	24000ffc 	.word	0x24000ffc
 80090b0:	24004bfc 	.word	0x24004bfc
 80090b4:	24004c04 	.word	0x24004c04
 80090b8:	24004c0c 	.word	0x24004c0c
 80090bc:	24004c08 	.word	0x24004c08
 80090c0:	24004c18 	.word	0x24004c18

080090c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090cc:	4b28      	ldr	r3, [pc, #160]	@ (8009170 <prvInsertBlockIntoFreeList+0xac>)
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e002      	b.n	80090d8 <prvInsertBlockIntoFreeList+0x14>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d8f7      	bhi.n	80090d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	4413      	add	r3, r2
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d108      	bne.n	8009106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	441a      	add	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d118      	bne.n	800914c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b15      	ldr	r3, [pc, #84]	@ (8009174 <prvInsertBlockIntoFreeList+0xb0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d00d      	beq.n	8009142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	441a      	add	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e008      	b.n	8009154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009142:	4b0c      	ldr	r3, [pc, #48]	@ (8009174 <prvInsertBlockIntoFreeList+0xb0>)
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e003      	b.n	8009154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	d002      	beq.n	8009162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	24004bfc 	.word	0x24004bfc
 8009174:	24004c04 	.word	0x24004c04

08009178 <memset>:
 8009178:	4402      	add	r2, r0
 800917a:	4603      	mov	r3, r0
 800917c:	4293      	cmp	r3, r2
 800917e:	d100      	bne.n	8009182 <memset+0xa>
 8009180:	4770      	bx	lr
 8009182:	f803 1b01 	strb.w	r1, [r3], #1
 8009186:	e7f9      	b.n	800917c <memset+0x4>

08009188 <__libc_init_array>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	4d0d      	ldr	r5, [pc, #52]	@ (80091c0 <__libc_init_array+0x38>)
 800918c:	4c0d      	ldr	r4, [pc, #52]	@ (80091c4 <__libc_init_array+0x3c>)
 800918e:	1b64      	subs	r4, r4, r5
 8009190:	10a4      	asrs	r4, r4, #2
 8009192:	2600      	movs	r6, #0
 8009194:	42a6      	cmp	r6, r4
 8009196:	d109      	bne.n	80091ac <__libc_init_array+0x24>
 8009198:	4d0b      	ldr	r5, [pc, #44]	@ (80091c8 <__libc_init_array+0x40>)
 800919a:	4c0c      	ldr	r4, [pc, #48]	@ (80091cc <__libc_init_array+0x44>)
 800919c:	f000 f826 	bl	80091ec <_init>
 80091a0:	1b64      	subs	r4, r4, r5
 80091a2:	10a4      	asrs	r4, r4, #2
 80091a4:	2600      	movs	r6, #0
 80091a6:	42a6      	cmp	r6, r4
 80091a8:	d105      	bne.n	80091b6 <__libc_init_array+0x2e>
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b0:	4798      	blx	r3
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7ee      	b.n	8009194 <__libc_init_array+0xc>
 80091b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ba:	4798      	blx	r3
 80091bc:	3601      	adds	r6, #1
 80091be:	e7f2      	b.n	80091a6 <__libc_init_array+0x1e>
 80091c0:	080092ac 	.word	0x080092ac
 80091c4:	080092ac 	.word	0x080092ac
 80091c8:	080092ac 	.word	0x080092ac
 80091cc:	080092b0 	.word	0x080092b0

080091d0 <memcpy>:
 80091d0:	440a      	add	r2, r1
 80091d2:	4291      	cmp	r1, r2
 80091d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091d8:	d100      	bne.n	80091dc <memcpy+0xc>
 80091da:	4770      	bx	lr
 80091dc:	b510      	push	{r4, lr}
 80091de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091e6:	4291      	cmp	r1, r2
 80091e8:	d1f9      	bne.n	80091de <memcpy+0xe>
 80091ea:	bd10      	pop	{r4, pc}

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
